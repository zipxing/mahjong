{"version":3,"sources":["file:///Users/xinzhou/work/mahjong/star/assets/scripts/ScoreManager.ts"],"names":["ScoreManager","targetScore","currentScore","init","console","log","calculateEliminationScore","blockCount","score","Math","pow","calculateBonusScore","remainingBlocks","bonusScore","getEliminationScoreBreakdown","formula","examples","getBonusScoreBreakdown","description","calculateRequiredBlocksForTarget","remainingScore","possibleMoves","movesNeeded","ceil","push","evaluatePerformance","movesCount","scoreRatio","avgScorePerMove","rating","efficiency","round","getTargetScore","setTargetScore","getEliminationStrategy","title","tips","debugPrintScoreInfo","toFixed","required"],"mappings":"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","sourcesContent":["/**\n * ÂæóÂàÜÁÆ°ÁêÜÂô®\n * Ë¥üË¥£Â§ÑÁêÜÊ∏∏ÊàèÂæóÂàÜËÆ°ÁÆóÔºåÂåÖÊã¨Ê∂àÈô§ÂæóÂàÜÂíåÂ•ñÂä±ÂæóÂàÜ\n */\n\nexport class ScoreManager {\n    private targetScore: number = 1000;\n    private currentScore: number = 0;\n    \n    /**\n     * ÂàùÂßãÂåñÂæóÂàÜÁÆ°ÁêÜÂô®\n     */\n    init(targetScore: number) {\n        this.targetScore = targetScore;\n        this.currentScore = 0;\n        \n        console.log(`‚úÖ ÂæóÂàÜÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂÆåÊàêÔºåÁõÆÊ†áÂàÜÊï∞: ${this.targetScore}`);\n    }\n    \n    /**\n     * ËÆ°ÁÆóÊ∂àÈô§ÂæóÂàÜ\n     * ÂÖ¨ÂºèÔºö(n-2)¬≤ÔºåÂÖ∂‰∏≠nÊòØÊ∂àÈô§ÁöÑÊñπÂùóÊï∞Èáè\n     */\n    calculateEliminationScore(blockCount: number): number {\n        if (blockCount < 2) {\n            return 0;  // Â∞ë‰∫é2‰∏™ÊñπÂùó‰∏çËÉΩÊ∂àÈô§\n        }\n        \n        const score = Math.pow(blockCount - 2, 2);\n        \n        console.log(`üí∞ Ê∂àÈô§ ${blockCount} ‰∏™ÊñπÂùóÔºåÂæóÂàÜ: ${score}`);\n        return score;\n    }\n    \n    /**\n     * ËÆ°ÁÆóÂâ©‰ΩôÊñπÂùóÂ•ñÂä±ÂæóÂàÜ\n     * ÂΩìÂâ©‰ΩôÊñπÂùóÊï∞Èáè ‚â§ 10 Êó∂ÔºöÂ•ñÂä±ÂàÜÊï∞ = (10 - Ââ©‰ΩôÊï∞) √ó 10\n     * ÂΩìÂâ©‰ΩôÊñπÂùóÊï∞Èáè = 0 Êó∂ÔºöÈ¢ùÂ§ñÂ•ñÂä± 200 ÂàÜ\n     */\n    calculateBonusScore(remainingBlocks: number): number {\n        let bonusScore = 0;\n        \n        if (remainingBlocks <= 10) {\n            bonusScore = (10 - remainingBlocks) * 10;\n            \n            // ÂÖ®Ê∏ÖÈ¢ùÂ§ñÂ•ñÂä±\n            if (remainingBlocks === 0) {\n                bonusScore += 200;\n                console.log(`üéâ ÂÖ®Ê∏ÖÂ•ñÂä±ÔºÅÈ¢ùÂ§ñËé∑Âæó 200 ÂàÜ`);\n            }\n            \n            console.log(`üéÅ Ââ©‰ΩôÊñπÂùóÂ•ñÂä±: Ââ©‰Ωô ${remainingBlocks} ‰∏™ÔºåÂ•ñÂä± ${bonusScore} ÂàÜ`);\n        } else {\n            console.log(`üìä Ââ©‰ΩôÊñπÂùó: ${remainingBlocks} ‰∏™ÔºåÊó†Â•ñÂä±`);\n        }\n        \n        return bonusScore;\n    }\n    \n    /**\n     * Ëé∑ÂèñÊ∂àÈô§ÂæóÂàÜÁöÑËØ¶ÁªÜËØ¥Êòé\n     */\n    getEliminationScoreBreakdown(blockCount: number): {\n        blockCount: number,\n        formula: string,\n        score: number,\n        examples: string[]\n    } {\n        const score = this.calculateEliminationScore(blockCount);\n        \n        return {\n            blockCount: blockCount,\n            formula: `(${blockCount} - 2)¬≤ = ${score}`,\n            score: score,\n            examples: [\n                \"Ê∂àÈô§ 2 ‰∏™: (2-2)¬≤ = 0 ÂàÜ\",\n                \"Ê∂àÈô§ 3 ‰∏™: (3-2)¬≤ = 1 ÂàÜ\",\n                \"Ê∂àÈô§ 4 ‰∏™: (4-2)¬≤ = 4 ÂàÜ\",\n                \"Ê∂àÈô§ 5 ‰∏™: (5-2)¬≤ = 9 ÂàÜ\",\n                \"Ê∂àÈô§ 10 ‰∏™: (10-2)¬≤ = 64 ÂàÜ\"\n            ]\n        };\n    }\n    \n    /**\n     * Ëé∑ÂèñÂ•ñÂä±ÂæóÂàÜÁöÑËØ¶ÁªÜËØ¥Êòé\n     */\n    getBonusScoreBreakdown(remainingBlocks: number): {\n        remainingBlocks: number,\n        formula: string,\n        bonusScore: number,\n        description: string\n    } {\n        const bonusScore = this.calculateBonusScore(remainingBlocks);\n        let formula = \"\";\n        let description = \"\";\n        \n        if (remainingBlocks > 10) {\n            formula = \"Êó†Â•ñÂä±\";\n            description = \"Ââ©‰ΩôÊñπÂùóË∂ÖËøá10‰∏™ÔºåÊó†Â•ñÂä±\";\n        } else if (remainingBlocks === 0) {\n            formula = \"(10 - 0) √ó 10 + 200 = 300\";\n            description = \"ÂÖ®Ê∏ÖÔºöÂü∫Á°ÄÂ•ñÂä±100ÂàÜ + ÂÖ®Ê∏ÖÂ•ñÂä±200ÂàÜ\";\n        } else {\n            formula = `(10 - ${remainingBlocks}) √ó 10 = ${bonusScore}`;\n            description = `Ââ©‰Ωô${remainingBlocks}‰∏™ÊñπÂùóÔºåËé∑ÂæóÂ•ñÂä±`;\n        }\n        \n        return {\n            remainingBlocks: remainingBlocks,\n            formula: formula,\n            bonusScore: bonusScore,\n            description: description\n        };\n    }\n    \n    /**\n     * ËÆ°ÁÆóËææÂà∞ÁõÆÊ†áÂàÜÊï∞ËøòÈúÄË¶ÅÁöÑÊúÄÂ∞ëÊñπÂùóÊï∞\n     */\n    calculateRequiredBlocksForTarget(currentScore: number): {\n        remainingScore: number,\n        possibleMoves: {blockCount: number, score: number, movesNeeded: number}[]\n    } {\n        const remainingScore = this.targetScore - currentScore;\n        \n        if (remainingScore <= 0) {\n            return {\n                remainingScore: 0,\n                possibleMoves: []\n            };\n        }\n        \n        const possibleMoves: {blockCount: number, score: number, movesNeeded: number}[] = [];\n        \n        // ËÆ°ÁÆó‰∏çÂêåÊ∂àÈô§Êï∞ÈáèÁöÑÊÉÖÂÜµ\n        for (let blockCount = 2; blockCount <= 20; blockCount++) {\n            const score = this.calculateEliminationScore(blockCount);\n            if (score > 0) {\n                const movesNeeded = Math.ceil(remainingScore / score);\n                possibleMoves.push({\n                    blockCount: blockCount,\n                    score: score,\n                    movesNeeded: movesNeeded\n                });\n            }\n        }\n        \n        return {\n            remainingScore: remainingScore,\n            possibleMoves: possibleMoves\n        };\n    }\n    \n    /**\n     * ËØÑ‰º∞ÂΩìÂâçÊ∏∏ÊàèË°®Áé∞\n     */\n    evaluatePerformance(currentScore: number, movesCount: number): {\n        rating: string,\n        description: string,\n        efficiency: number\n    } {\n        const targetScore = this.targetScore;\n        const scoreRatio = currentScore / targetScore;\n        const avgScorePerMove = movesCount > 0 ? currentScore / movesCount : 0;\n        \n        let rating = \"\";\n        let description = \"\";\n        \n        if (scoreRatio >= 1.0) {\n            if (avgScorePerMove >= 20) {\n                rating = \"ÂÆåÁæé\";\n                description = \"Âá∫Ëâ≤ÂÆåÊàêÁõÆÊ†áÔºåÊïàÁéáÊûÅÈ´òÔºÅ\";\n            } else {\n                rating = \"‰ºòÁßÄ\";\n                description = \"ÊàêÂäüËææÂà∞ÁõÆÊ†áÂàÜÊï∞ÔºÅ\";\n            }\n        } else if (scoreRatio >= 0.8) {\n            rating = \"ËâØÂ•Ω\";\n            description = \"Êé•ËøëÁõÆÊ†áÔºåË°®Áé∞‰∏çÈîôÔºÅ\";\n        } else if (scoreRatio >= 0.6) {\n            rating = \"‰∏ÄËà¨\";\n            description = \"ËøòÈúÄË¶ÅÂä™ÂäõÊèêÈ´òÊïàÁéá„ÄÇ\";\n        } else {\n            rating = \"ÈúÄË¶ÅÊîπËøõ\";\n            description = \"Â∞ùËØïÂØªÊâæÊõ¥Â§ßÁöÑËøûÈÄöÂå∫Âüü„ÄÇ\";\n        }\n        \n        return {\n            rating: rating,\n            description: description,\n            efficiency: Math.round(avgScorePerMove * 100) / 100\n        };\n    }\n    \n    /**\n     * Ëé∑ÂèñÁõÆÊ†áÂàÜÊï∞\n     */\n    getTargetScore(): number {\n        return this.targetScore;\n    }\n    \n    /**\n     * ËÆæÁΩÆÁõÆÊ†áÂàÜÊï∞\n     */\n    setTargetScore(targetScore: number) {\n        this.targetScore = targetScore;\n        console.log(`üéØ ÁõÆÊ†áÂàÜÊï∞ËÆæÁΩÆ‰∏∫: ${this.targetScore}`);\n    }\n    \n    /**\n     * Ëé∑ÂèñÂª∫ËÆÆÁöÑÊ∂àÈô§Á≠ñÁï•\n     */\n    getEliminationStrategy(): {\n        title: string,\n        tips: string[]\n    } {\n        return {\n            title: \"Ê∂àÈô§Á≠ñÁï•Âª∫ËÆÆ\",\n            tips: [\n                \"‰ºòÂÖàÂØªÊâæÂ§ßÁöÑËøûÈÄöÂå∫ÂüüÔºà5+‰∏™ÊñπÂùóÔºâ\",\n                \"ÈÅøÂÖçËøáÊó©Ê∂àÈô§Â∞èÂå∫ÂüüÔºà2-3‰∏™ÊñπÂùóÔºâ\",\n                \"ËßÇÂØüÊ∂àÈô§ÂêéÁöÑËøûÈîÅÂèçÂ∫î\",\n                \"‰øùÊåÅÊ£ãÁõòÁöÑËøûÈÄöÊÄß\",\n                \"ËÆ°ÂàíÂ§öÊ≠•Ê∂àÈô§Â∫èÂàó\",\n                \"Âú®ÂêéÊúüÊ≥®ÊÑèÂâ©‰ΩôÊñπÂùóÂ•ñÂä±\"\n            ]\n        };\n    }\n    \n    /**\n     * Ë∞ÉËØïÔºöÊâìÂç∞ÂæóÂàÜ‰ø°ÊÅØ\n     */\n    debugPrintScoreInfo(currentScore: number, movesCount: number) {\n        console.log('üìä ÂæóÂàÜ‰ø°ÊÅØ:');\n        console.log(`  ÂΩìÂâçÂàÜÊï∞: ${currentScore}`);\n        console.log(`  ÁõÆÊ†áÂàÜÊï∞: ${this.targetScore}`);\n        console.log(`  ÂÆåÊàêÂ∫¶: ${((currentScore / this.targetScore) * 100).toFixed(1)}%`);\n        console.log(`  ÁßªÂä®Ê¨°Êï∞: ${movesCount}`);\n        console.log(`  Âπ≥ÂùáÊØèÊ¨°ÂæóÂàÜ: ${movesCount > 0 ? (currentScore / movesCount).toFixed(1) : 0}`);\n        \n        const required = this.calculateRequiredBlocksForTarget(currentScore);\n        console.log(`  ËøòÈúÄÂæóÂàÜ: ${required.remainingScore}`);\n    }\n}\n"]}