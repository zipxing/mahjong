{"version":3,"sources":["file:///Users/xinzhou/work/mahjong/star/assets/scripts/GameStateManager.ts"],"names":["GameStateManager","GameState","currentState","LOADING","previousState","gameData","currentScore","targetScore","moveCount","remainingBlocks","elapsedTime","level","gameStatistics","totalMoves","totalScore","largestElimination","averageScorePerMove","playTime","consecutiveVictories","gameStartTime","pauseStartTime","totalPausedTime","stateChangeCallbacks","Map","init","initializeStateCallbacks","loadGameStatistics","console","log","state","Object","values","set","setState","newState","handleStateExit","handleStateEnter","triggerStateCallbacks","PLAYING","Date","now","PAUSED","GAME_OVER","VICTORY","finalizeGameSession","saveGameStatistics","startNewGame","pauseGame","resumeGame","endGame","isVictory","updateGameData","updates","assign","undefined","recordElimination","blocksEliminated","scoreGained","getCurrentState","getPreviousState","getGameData","getGameStatistics","canPerformGameAction","isGameEnded","isGamePaused","onStateChange","callback","callbacks","get","push","offStateChange","index","indexOf","splice","forEach","error","getGameProgress","Math","min","getEfficiencyRating","avgScore","localStorage","setItem","JSON","stringify","warn","saved","getItem","parse","resetStatistics","debugPrintState","toFixed"],"mappings":"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","sourcesContent":["/**\n * 游戏状态管理器\n * 负责管理游戏的各种状态，包括开始、暂停、结束等\n */\n\nexport enum GameState {\n    LOADING = 'loading',\n    MENU = 'menu', \n    PLAYING = 'playing',\n    PAUSED = 'paused',\n    GAME_OVER = 'game_over',\n    VICTORY = 'victory'\n}\n\nexport interface GameData {\n    currentScore: number;\n    targetScore: number;\n    moveCount: number;\n    remainingBlocks: number;\n    elapsedTime: number;\n    level: number;\n}\n\nexport interface GameStatistics {\n    totalMoves: number;\n    totalScore: number;\n    largestElimination: number;\n    averageScorePerMove: number;\n    playTime: number;\n    consecutiveVictories: number;\n}\n\nexport class GameStateManager {\n    \n    // 当前游戏状态\n    private currentState: GameState = GameState.LOADING;\n    private previousState: GameState = GameState.LOADING;\n    \n    // 游戏数据\n    private gameData: GameData = {\n        currentScore: 0,\n        targetScore: 1000,\n        moveCount: 0,\n        remainingBlocks: 100,\n        elapsedTime: 0,\n        level: 1\n    };\n    \n    // 游戏统计\n    private gameStatistics: GameStatistics = {\n        totalMoves: 0,\n        totalScore: 0,\n        largestElimination: 0,\n        averageScorePerMove: 0,\n        playTime: 0,\n        consecutiveVictories: 0\n    };\n    \n    // 时间跟踪\n    private gameStartTime: number = 0;\n    private pauseStartTime: number = 0;\n    private totalPausedTime: number = 0;\n    \n    // 状态变化回调\n    private stateChangeCallbacks: Map<GameState, (() => void)[]> = new Map();\n    \n    /**\n     * 初始化游戏状态管理器\n     */\n    init() {\n        this.initializeStateCallbacks();\n        this.loadGameStatistics();\n        \n        console.log('✅ 游戏状态管理器初始化完成');\n    }\n    \n    /**\n     * 初始化状态回调映射\n     */\n    private initializeStateCallbacks() {\n        for (const state of Object.values(GameState)) {\n            this.stateChangeCallbacks.set(state, []);\n        }\n    }\n    \n    /**\n     * 设置游戏状态\n     */\n    setState(newState: GameState) {\n        if (this.currentState === newState) {\n            console.log(`⚠️ 游戏状态已经是 ${newState}，跳过设置`);\n            return;\n        }\n        \n        console.log(`🔄 游戏状态变化: ${this.currentState} -> ${newState}`);\n        \n        // 处理状态退出逻辑\n        this.handleStateExit(this.currentState);\n        \n        // 更新状态\n        this.previousState = this.currentState;\n        this.currentState = newState;\n        \n        // 处理状态进入逻辑\n        this.handleStateEnter(newState);\n        \n        // 调用状态变化回调\n        this.triggerStateCallbacks(newState);\n    }\n    \n    /**\n     * 处理状态退出逻辑\n     */\n    private handleStateExit(state: GameState) {\n        switch (state) {\n            case GameState.PLAYING:\n                // 记录游戏时间\n                if (this.gameStartTime > 0) {\n                    this.gameData.elapsedTime = Date.now() - this.gameStartTime - this.totalPausedTime;\n                }\n                break;\n                \n            case GameState.PAUSED:\n                // 记录暂停时间\n                if (this.pauseStartTime > 0) {\n                    this.totalPausedTime += Date.now() - this.pauseStartTime;\n                    this.pauseStartTime = 0;\n                }\n                break;\n        }\n    }\n    \n    /**\n     * 处理状态进入逻辑\n     */\n    private handleStateEnter(state: GameState) {\n        switch (state) {\n            case GameState.PLAYING:\n                if (this.gameStartTime === 0) {\n                    this.gameStartTime = Date.now();\n                    this.totalPausedTime = 0;\n                }\n                break;\n                \n            case GameState.PAUSED:\n                this.pauseStartTime = Date.now();\n                break;\n                \n            case GameState.GAME_OVER:\n            case GameState.VICTORY:\n                this.finalizeGameSession();\n                break;\n        }\n    }\n    \n    /**\n     * 结束游戏会话，更新统计数据\n     */\n    private finalizeGameSession() {\n        // 更新游戏统计\n        this.gameStatistics.totalMoves += this.gameData.moveCount;\n        this.gameStatistics.totalScore += this.gameData.currentScore;\n        this.gameStatistics.playTime += this.gameData.elapsedTime;\n        \n        if (this.gameData.moveCount > 0) {\n            this.gameStatistics.averageScorePerMove = \n                this.gameStatistics.totalScore / this.gameStatistics.totalMoves;\n        }\n        \n        if (this.currentState === GameState.VICTORY) {\n            this.gameStatistics.consecutiveVictories++;\n        } else {\n            this.gameStatistics.consecutiveVictories = 0;\n        }\n        \n        // 保存统计数据\n        this.saveGameStatistics();\n        \n        console.log('📊 游戏会话结束，统计数据已更新');\n    }\n    \n    /**\n     * 开始新游戏\n     */\n    startNewGame(level: number = 1, targetScore: number = 1000) {\n        console.log(`🎮 开始新游戏 - 关卡: ${level}, 目标分数: ${targetScore}`);\n        \n        // 重置游戏数据\n        this.gameData = {\n            currentScore: 0,\n            targetScore: targetScore,\n            moveCount: 0,\n            remainingBlocks: 100, // 10x10 棋盘\n            elapsedTime: 0,\n            level: level\n        };\n        \n        // 重置时间跟踪\n        this.gameStartTime = 0;\n        this.pauseStartTime = 0;\n        this.totalPausedTime = 0;\n        \n        // 设置为游戏中状态\n        this.setState(GameState.PLAYING);\n    }\n    \n    /**\n     * 暂停游戏\n     */\n    pauseGame() {\n        if (this.currentState === GameState.PLAYING) {\n            this.setState(GameState.PAUSED);\n        }\n    }\n    \n    /**\n     * 恢复游戏\n     */\n    resumeGame() {\n        if (this.currentState === GameState.PAUSED) {\n            this.setState(GameState.PLAYING);\n        }\n    }\n    \n    /**\n     * 结束游戏\n     */\n    endGame(isVictory: boolean = false) {\n        const newState = isVictory ? GameState.VICTORY : GameState.GAME_OVER;\n        this.setState(newState);\n    }\n    \n    /**\n     * 更新游戏数据\n     */\n    updateGameData(updates: Partial<GameData>) {\n        Object.assign(this.gameData, updates);\n        \n        // 检查胜利条件\n        if (updates.currentScore !== undefined && \n            this.gameData.currentScore >= this.gameData.targetScore) {\n            this.endGame(true);\n        }\n        \n        // 检查失败条件（如果需要的话）\n        // 例如：无可消除方块且分数不足\n    }\n    \n    /**\n     * 记录消除操作\n     */\n    recordElimination(blocksEliminated: number, scoreGained: number) {\n        this.gameData.moveCount++;\n        this.gameData.currentScore += scoreGained;\n        this.gameData.remainingBlocks -= blocksEliminated;\n        \n        // 更新最大消除记录\n        if (blocksEliminated > this.gameStatistics.largestElimination) {\n            this.gameStatistics.largestElimination = blocksEliminated;\n        }\n        \n        console.log(`📝 记录消除: ${blocksEliminated} 个方块, +${scoreGained} 分`);\n    }\n    \n    /**\n     * 获取当前游戏状态\n     */\n    getCurrentState(): GameState {\n        return this.currentState;\n    }\n    \n    /**\n     * 获取上一个游戏状态\n     */\n    getPreviousState(): GameState {\n        return this.previousState;\n    }\n    \n    /**\n     * 获取游戏数据\n     */\n    getGameData(): GameData {\n        return { ...this.gameData };\n    }\n    \n    /**\n     * 获取游戏统计\n     */\n    getGameStatistics(): GameStatistics {\n        return { ...this.gameStatistics };\n    }\n    \n    /**\n     * 检查是否可以进行游戏操作\n     */\n    canPerformGameAction(): boolean {\n        return this.currentState === GameState.PLAYING;\n    }\n    \n    /**\n     * 检查游戏是否结束\n     */\n    isGameEnded(): boolean {\n        return this.currentState === GameState.GAME_OVER || \n               this.currentState === GameState.VICTORY;\n    }\n    \n    /**\n     * 检查游戏是否暂停\n     */\n    isGamePaused(): boolean {\n        return this.currentState === GameState.PAUSED;\n    }\n    \n    /**\n     * 注册状态变化回调\n     */\n    onStateChange(state: GameState, callback: () => void) {\n        const callbacks = this.stateChangeCallbacks.get(state);\n        if (callbacks) {\n            callbacks.push(callback);\n        }\n    }\n    \n    /**\n     * 移除状态变化回调\n     */\n    offStateChange(state: GameState, callback: () => void) {\n        const callbacks = this.stateChangeCallbacks.get(state);\n        if (callbacks) {\n            const index = callbacks.indexOf(callback);\n            if (index > -1) {\n                callbacks.splice(index, 1);\n            }\n        }\n    }\n    \n    /**\n     * 触发状态变化回调\n     */\n    private triggerStateCallbacks(state: GameState) {\n        const callbacks = this.stateChangeCallbacks.get(state);\n        if (callbacks) {\n            callbacks.forEach(callback => {\n                try {\n                    callback();\n                } catch (error) {\n                    console.error(`❌ 状态回调执行出错: ${error}`);\n                }\n            });\n        }\n    }\n    \n    /**\n     * 获取游戏进度百分比\n     */\n    getGameProgress(): number {\n        if (this.gameData.targetScore <= 0) return 0;\n        return Math.min(100, (this.gameData.currentScore / this.gameData.targetScore) * 100);\n    }\n    \n    /**\n     * 获取游戏效率评级\n     */\n    getEfficiencyRating(): string {\n        if (this.gameData.moveCount === 0) return \"未开始\";\n        \n        const avgScore = this.gameData.currentScore / this.gameData.moveCount;\n        \n        if (avgScore >= 20) return \"优秀\";\n        if (avgScore >= 10) return \"良好\";\n        if (avgScore >= 5) return \"一般\";\n        return \"需要改进\";\n    }\n    \n    /**\n     * 保存游戏统计到本地存储\n     */\n    private saveGameStatistics() {\n        try {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.setItem('starElimination_statistics', JSON.stringify(this.gameStatistics));\n                console.log('💾 游戏统计已保存');\n            }\n        } catch (error) {\n            console.warn('⚠️ 保存游戏统计失败:', error);\n        }\n    }\n    \n    /**\n     * 从本地存储加载游戏统计\n     */\n    private loadGameStatistics() {\n        try {\n            if (typeof localStorage !== 'undefined') {\n                const saved = localStorage.getItem('starElimination_statistics');\n                if (saved) {\n                    this.gameStatistics = JSON.parse(saved);\n                    console.log('📁 游戏统计已加载');\n                }\n            }\n        } catch (error) {\n            console.warn('⚠️ 加载游戏统计失败:', error);\n        }\n    }\n    \n    /**\n     * 重置游戏统计\n     */\n    resetStatistics() {\n        this.gameStatistics = {\n            totalMoves: 0,\n            totalScore: 0,\n            largestElimination: 0,\n            averageScorePerMove: 0,\n            playTime: 0,\n            consecutiveVictories: 0\n        };\n        \n        this.saveGameStatistics();\n        console.log('🔄 游戏统计已重置');\n    }\n    \n    /**\n     * 调试：打印当前状态\n     */\n    debugPrintState() {\n        console.log('🎲 游戏状态信息:');\n        console.log(`  当前状态: ${this.currentState}`);\n        console.log(`  上一状态: ${this.previousState}`);\n        console.log(`  游戏数据:`, this.gameData);\n        console.log(`  游戏统计:`, this.gameStatistics);\n        console.log(`  游戏进度: ${this.getGameProgress().toFixed(1)}%`);\n        console.log(`  效率评级: ${this.getEfficiencyRating()}`);\n    }\n}\n"]}