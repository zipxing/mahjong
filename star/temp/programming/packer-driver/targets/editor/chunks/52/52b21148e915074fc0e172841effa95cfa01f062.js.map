{"version":3,"sources":["file:///Users/xinzhou/work/mahjong/star/assets/scripts/BoardManager.ts"],"names":["BoardManager","Vec3","UITransform","gameBoardNode","boardData","boardSize","blockSize","blockSpacing","init","adaptToScreenSize","initBoardData","console","log","getTotalBoardSize","defaultBlockSize","defaultBlockSpacing","totalSize","totalWidth","totalHeight","width","height","row","col","type","node","generateBoard","blockManager","name","gameBoardTransform","getComponent","contentSize","anchorPoint","x","y","worldPosition","toFixed","requiredSize","setContentSize","finalContentSize","warn","setAnchorPoint","worldPos","Math","abs","clearBoard","createdCount","blockType","floor","random","getBlockTypeCount","blockNode","createBlockNode","setParent","active","parent","children","length","localPos","gridToLocal","setPosition","error","i","min","child","position","totalBlocks","typeStats","blockData","removeFromParent","startX","startY","prevX","distance","screenToGridPosition","screenPos","boardWorldPos","getWorldPosition","relativeX","relativeY","offsetX","offsetY","blockStep","rawCol","rawRow","max","verifyPos","verifyWorldPos","errorX","errorY","getBlockAt","isValidPosition","getBlockNodeAt","isEmpty","removeBlocks","blocks","forEach","moveBlock","fromRow","fromCol","toRow","toCol","newPos","getBoardData","countRemainingBlocks","count","getEmptySpacesInColumn","emptyCount","getColumnBlocks","push","data","isColumnEmpty","getRightmostNonEmptyColumn","debugPrintBoard","rowStr","toString"],"mappings":"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","sourcesContent":["/**\n * 棋盘管理器\n * 负责管理10x10的游戏棋盘，包括棋盘数据结构、坐标转换、方块布局等功能\n */\n\nimport { Node, Vec3, UITransform, director } from 'cc';\nimport { BlockManager } from './BlockManager';\n\nexport interface BlockData {\n    type: number;      // 方块类型 (0-4: 不同颜色, -1: 空位)\n    node: Node | null; // 对应的节点对象\n}\n\nexport class BoardManager {\n    private gameBoardNode: Node = null!;\n    private boardData: BlockData[][] = [];\n    private boardSize: number = 10;\n    private blockSize: number = 60;\n    private blockSpacing: number = 5;\n    \n    /**\n     * 初始化棋盘管理器\n     */\n    init(gameBoardNode: Node, boardSize: number, blockSize: number, blockSpacing: number) {\n        this.gameBoardNode = gameBoardNode;\n        this.boardSize = boardSize;\n        \n        // 动态适配屏幕尺寸\n        this.adaptToScreenSize(blockSize, blockSpacing);\n        \n        // 初始化棋盘数据\n        this.initBoardData();\n        \n        console.log(`✅ 棋盘管理器初始化完成 ${boardSize}x${boardSize}`);\n        console.log(`📏 最终方块尺寸: ${this.blockSize}px, 间距: ${this.blockSpacing}px`);\n        console.log(`📐 棋盘总尺寸: ${this.getTotalBoardSize()}px`);\n    }\n    \n    /**\n     * 动态适配屏幕尺寸\n     */\n    private adaptToScreenSize(defaultBlockSize: number, defaultBlockSpacing: number) {\n        console.log(`🔧 使用固定配置，确保严格10×10方块`);\n        \n        // 修复间距问题：使用合理的方块尺寸和间距比例\n        this.blockSize = 40;  // 缩小方块到40px\n        this.blockSpacing = 6; // 增大间距到6px (15%的方块尺寸)\n        \n        const totalSize = this.boardSize * this.blockSize + (this.boardSize - 1) * this.blockSpacing;\n        // 10×40 + 9×6 = 400 + 54 = 454px\n        \n        console.log(`📐 固定配置结果:`);\n        console.log(`   - 方块大小: ${this.blockSize}px`);\n        console.log(`   - 方块间距: ${this.blockSpacing}px`);\n        console.log(`   - 棋盘总尺寸: ${totalSize}×${totalSize}px`);\n        console.log(`   - 严格控制: ${this.boardSize}×${this.boardSize} = ${this.boardSize * this.boardSize}个方块`);\n    }\n    \n    /**\n     * 获取棋盘总尺寸\n     */\n    private getTotalBoardSize(): {width: number, height: number} {\n        const totalWidth = this.boardSize * this.blockSize + (this.boardSize - 1) * this.blockSpacing;\n        const totalHeight = this.boardSize * this.blockSize + (this.boardSize - 1) * this.blockSpacing;\n        return {width: totalWidth, height: totalHeight};\n    }\n    \n    /**\n     * 初始化棋盘数据结构\n     */\n    private initBoardData() {\n        this.boardData = [];\n        for (let row = 0; row < this.boardSize; row++) {\n            this.boardData[row] = [];\n            for (let col = 0; col < this.boardSize; col++) {\n                this.boardData[row][col] = {\n                    type: -1,  // 初始为空\n                    node: null\n                };\n            }\n        }\n    }\n    \n    /**\n     * 生成游戏棋盘\n     */\n    generateBoard(blockManager: BlockManager) {\n        console.log('🎲 生成新的游戏棋盘');\n        \n        // 打印布局信息\n        const totalWidth = this.boardSize * this.blockSize + (this.boardSize - 1) * this.blockSpacing;\n        const totalHeight = this.boardSize * this.blockSize + (this.boardSize - 1) * this.blockSpacing;\n        console.log(`📊 棋盘布局信息:`);\n        console.log(`   - 网格大小: ${this.boardSize} × ${this.boardSize}`);\n        console.log(`   - 方块尺寸: ${this.blockSize} × ${this.blockSize}px`);\n        console.log(`   - 方块间距: ${this.blockSpacing}px`);\n        console.log(`   - 棋盘总尺寸: ${totalWidth} × ${totalHeight}px`);\n        console.log(`   - GameBoard节点: ${this.gameBoardNode.name}`);\n        \n        // 检查GameBoard节点的Transform设置\n        const gameBoardTransform = this.gameBoardNode.getComponent(UITransform);\n        if (gameBoardTransform) {\n            const contentSize = gameBoardTransform.contentSize;\n            const anchorPoint = gameBoardTransform.anchorPoint;\n            console.log(`📐 GameBoard UITransform:`);\n            console.log(`   - ContentSize: ${contentSize.width} × ${contentSize.height}`);\n            console.log(`   - AnchorPoint: (${anchorPoint.x}, ${anchorPoint.y})`);\n            console.log(`   - 世界位置: (${this.gameBoardNode.worldPosition.x.toFixed(1)}, ${this.gameBoardNode.worldPosition.y.toFixed(1)})`);\n            \n            // 强制设置GameBoard为固定尺寸 (454×454)\n            const requiredSize = 454; // 10×40 + 9×6 = 454\n            console.log(`🔧 强制设置GameBoard ContentSize为: ${requiredSize} × ${requiredSize}`);\n            gameBoardTransform.setContentSize(requiredSize, requiredSize);\n            \n            // 验证设置\n            const finalContentSize = gameBoardTransform.contentSize;\n            console.log(`✅ GameBoard最终尺寸: ${finalContentSize.width} × ${finalContentSize.height}`);\n            if (anchorPoint.x !== 0.5 || anchorPoint.y !== 0.5) {\n                console.warn(`⚠️ 自动设置GameBoard AnchorPoint为: (0.5, 0.5)`);\n                gameBoardTransform.setAnchorPoint(0.5, 0.5);\n                console.log(`✅ 已自动设置GameBoard AnchorPoint为: (0.5, 0.5)`);\n            }\n            \n            // 检查GameBoard位置是否合理 (应该在Canvas中心附近)\n            const worldPos = this.gameBoardNode.worldPosition;\n            if (Math.abs(worldPos.x - 360) > 50 || Math.abs(worldPos.y - 640) > 200) {\n                console.warn(`⚠️ GameBoard位置可能不合理: (${worldPos.x.toFixed(1)}, ${worldPos.y.toFixed(1)})`);\n                console.log(`💡 建议在Cocos Creator编辑器中调整GameBoard位置到屏幕中心`);\n            }\n        } else {\n            console.warn(`⚠️ GameBoard节点缺少UITransform组件`);\n        }\n        \n        // 清空现有棋盘\n        this.clearBoard();\n        \n        // 严格生成10×10方块，绝不超出\n        console.log(`🎯 开始严格创建 ${this.boardSize}×${this.boardSize} = ${this.boardSize * this.boardSize} 个方块`);\n        let createdCount = 0;\n        \n        for (let row = 0; row < 10; row++) {\n            for (let col = 0; col < 10; col++) {\n                const blockType = Math.floor(Math.random() * blockManager.getBlockTypeCount());\n                \n                // 添加随机数调试\n                if (row < 2 && col < 5) {\n                    console.log(`🎲 方块[${row}][${col}] 随机类型: ${blockType} (共${blockManager.getBlockTypeCount()}种)`);\n                }\n                \n                // 创建方块节点（传递动态计算的方块尺寸）\n                const blockNode = blockManager.createBlockNode(blockType, this.blockSize);\n                if (blockNode) {\n                    // 设置父节点\n                    blockNode.setParent(this.gameBoardNode);\n                    \n                    // 验证方块节点确实被创建（在设置父节点后）\n                    if (row === 0 && col === 0) {\n                        console.log(`✅ 第一个方块创建成功: ${blockNode.name}, 尺寸: ${this.blockSize}×${this.blockSize}`);\n                        console.log(`   方块激活状态: ${blockNode.active}`);\n                        console.log(`   方块父节点: ${blockNode.parent?.name}`);\n                        console.log(`   GameBoard激活状态: ${this.gameBoardNode.active}`);\n                        console.log(`   GameBoard子节点数: ${this.gameBoardNode.children.length}`);\n                    }\n                    \n                    // 设置位置\n                    const localPos = this.gridToLocal(row, col);\n                    blockNode.setPosition(localPos);\n                    \n                    // 设置名称便于调试\n                    blockNode.name = `Block_${row}_${col}`;\n                    \n                    // 添加位置调试信息（简化版本）\n                    if (row < 3 && col < 3) {\n                        console.log(`📍 方块[${row}][${col}] 位置: (${localPos.x.toFixed(1)}, ${localPos.y.toFixed(1)})`);\n                    }\n                    \n                    // 更新数据\n                    this.boardData[row][col] = {\n                        type: blockType,\n                        node: blockNode\n                    };\n                    \n                    createdCount++;\n                } else {\n                    console.error(`❌ 方块[${row}][${col}]创建失败！`);\n                }\n            }\n        }\n        \n        console.log(`🎯 方块创建完成: 实际创建 ${createdCount} 个，预期 100 个`);\n        if (createdCount !== 100) {\n            console.error(`❌ 方块数量不正确！预期100个，实际${createdCount}个`);\n        }\n        \n        // 验证GameBoard状态\n        console.log(`🔍 最终GameBoard状态检查:`);\n        console.log(`   - GameBoard激活: ${this.gameBoardNode.active}`);\n        console.log(`   - GameBoard子节点总数: ${this.gameBoardNode.children.length}`);\n        console.log(`   - GameBoard ContentSize: ${this.gameBoardNode.getComponent(UITransform)?.contentSize.width}×${this.gameBoardNode.getComponent(UITransform)?.contentSize.height}`);\n        \n        // 检查前几个子节点\n        for (let i = 0; i < Math.min(3, this.gameBoardNode.children.length); i++) {\n            const child = this.gameBoardNode.children[i];\n            console.log(`   - 子节点[${i}]: ${child.name}, 激活: ${child.active}, 位置: (${child.position.x.toFixed(1)}, ${child.position.y.toFixed(1)})`);\n        }\n        \n        // 显示诊断完成，移除测试方块避免干扰\n        console.log(`✅ 显示系统正常，已添加白色边框帮助识别方块边界`);\n        \n        // 统计实际创建的方块数量\n        let totalBlocks = 0;\n        let typeStats: {[key: number]: number} = {};\n        \n        for (let row = 0; row < this.boardSize; row++) {\n            for (let col = 0; col < this.boardSize; col++) {\n                const blockData = this.boardData[row][col];\n                if (blockData && blockData.node) {\n                    totalBlocks++;\n                    typeStats[blockData.type] = (typeStats[blockData.type] || 0) + 1;\n                }\n            }\n        }\n        \n        console.log(`✅ 棋盘生成完成 - 总计 ${totalBlocks} 个方块`);\n        console.log(`📊 方块类型分布:`, typeStats);\n        \n        // 检查是否有方块没有正确显示\n        if (totalBlocks < this.boardSize * this.boardSize) {\n            console.warn(`⚠️ 方块数量不足！预期 ${this.boardSize * this.boardSize} 个，实际 ${totalBlocks} 个`);\n        }\n    }\n    \n    /**\n     * 清空棋盘\n     */\n    clearBoard() {\n        for (let row = 0; row < this.boardSize; row++) {\n            for (let col = 0; col < this.boardSize; col++) {\n                if (this.boardData[row][col]?.node) {\n                    this.boardData[row][col].node!.removeFromParent();\n                }\n                this.boardData[row][col] = {\n                    type: -1,\n                    node: null\n                };\n            }\n        }\n    }\n    \n    /**\n     * 网格坐标转换为本地坐标\n     */\n    gridToLocal(row: number, col: number): Vec3 {\n        // 计算棋盘的总尺寸\n        const totalWidth = this.boardSize * this.blockSize + (this.boardSize - 1) * this.blockSpacing;\n        const totalHeight = this.boardSize * this.blockSize + (this.boardSize - 1) * this.blockSpacing;\n        \n        // 计算起始偏移（让棋盘居中）\n        const startX = -totalWidth / 2 + this.blockSize / 2;\n        const startY = totalHeight / 2 - this.blockSize / 2;\n        \n        // 计算具体位置\n        const x = startX + col * (this.blockSize + this.blockSpacing);\n        const y = startY - row * (this.blockSize + this.blockSpacing);\n        \n        // 添加详细调试信息（前几个方块）\n        if ((row === 0 && col < 3) || (col === 0 && row < 3)) {\n            console.log(`🔍 网格转换详情 [${row}][${col}]:`);\n            console.log(`   棋盘总尺寸: ${totalWidth} × ${totalHeight}`);\n            console.log(`   起始位置: (${startX.toFixed(1)}, ${startY.toFixed(1)})`);\n            console.log(`   方块尺寸: ${this.blockSize}px, 间距: ${this.blockSpacing}px`);\n            console.log(`   步长计算: col=${col} × (${this.blockSize}+${this.blockSpacing}) = ${col * (this.blockSize + this.blockSpacing)}`);\n            console.log(`   最终位置: (${x.toFixed(1)}, ${y.toFixed(1)})`);\n            \n            // 验证相邻方块间距\n            if (col === 1 && row === 0) {\n                const prevX = startX + 0 * (this.blockSize + this.blockSpacing);\n                const distance = x - prevX;\n                console.log(`   🔍 与前一方块距离: ${distance}px (预期: ${this.blockSize + this.blockSpacing}px)`);\n                if (Math.abs(distance - (this.blockSize + this.blockSpacing)) > 0.1) {\n                    console.warn(`   ⚠️ 间距异常！`);\n                }\n            }\n        }\n        \n        return new Vec3(x, y, 0);\n    }\n    \n    /**\n     * 屏幕坐标转换为网格坐标\n     */\n    screenToGridPosition(screenPos: Vec3): {row: number, col: number} {\n        console.log(`\\n🔄 ===== 坐标转换开始 =====`);\n        console.log(`📍 输入世界坐标: (${screenPos.x.toFixed(1)}, ${screenPos.y.toFixed(1)})`);\n        \n        // 获取棋盘节点的世界坐标\n        const boardWorldPos = this.gameBoardNode.getWorldPosition();\n        console.log(`🎮 棋盘世界坐标: (${boardWorldPos.x.toFixed(1)}, ${boardWorldPos.y.toFixed(1)})`);\n        \n        // 转换为相对于棋盘中心的坐标\n        const relativeX = screenPos.x - boardWorldPos.x;\n        const relativeY = screenPos.y - boardWorldPos.y;\n        console.log(`📐 相对坐标: (${relativeX.toFixed(1)}, ${relativeY.toFixed(1)})`);\n        \n        // 计算网格参数\n        const totalWidth = this.boardSize * this.blockSize + (this.boardSize - 1) * this.blockSpacing;\n        const totalHeight = this.boardSize * this.blockSize + (this.boardSize - 1) * this.blockSpacing;\n        console.log(`📏 棋盘总尺寸: ${totalWidth} x ${totalHeight}`);\n        \n        // 网格布局：棋盘中心为原点，向左右上下扩展\n        const startX = -totalWidth / 2 + this.blockSize / 2;  // 第一个方块的中心X\n        const startY = totalHeight / 2 - this.blockSize / 2;   // 第一个方块的中心Y\n        console.log(`🏁 第一个方块中心: (${startX.toFixed(1)}, ${startY.toFixed(1)})`);\n        \n        // 计算点击位置相对于第一个方块的偏移\n        const offsetX = relativeX - startX;\n        const offsetY = startY - relativeY;  // Y轴向下为正\n        console.log(`📏 相对第一个方块偏移: (${offsetX.toFixed(1)}, ${offsetY.toFixed(1)})`);\n        \n        // 计算网格坐标\n        const blockStep = this.blockSize + this.blockSpacing;\n        const rawCol = offsetX / blockStep;\n        const rawRow = offsetY / blockStep;\n        console.log(`🧮 原始网格坐标: (${rawRow.toFixed(2)}, ${rawCol.toFixed(2)})`);\n        \n        // 取整并限制范围\n        const col = Math.max(0, Math.min(this.boardSize - 1, Math.floor(rawCol + 0.5))); // +0.5 进行四舍五入\n        const row = Math.max(0, Math.min(this.boardSize - 1, Math.floor(rawRow + 0.5)));\n        console.log(`🎯 最终网格坐标: (${row}, ${col})`);\n        \n        // 验证：计算该网格位置的实际世界坐标\n        const verifyPos = this.gridToLocal(row, col);\n        const verifyWorldPos = new Vec3(verifyPos.x + boardWorldPos.x, verifyPos.y + boardWorldPos.y, 0);\n        console.log(`✅ 验证：网格(${row}, ${col}) 对应世界坐标 (${verifyWorldPos.x.toFixed(1)}, ${verifyWorldPos.y.toFixed(1)})`);\n        \n        // 计算点击误差\n        const errorX = Math.abs(screenPos.x - verifyWorldPos.x);\n        const errorY = Math.abs(screenPos.y - verifyWorldPos.y);\n        console.log(`📏 点击误差: X=${errorX.toFixed(1)}, Y=${errorY.toFixed(1)}`);\n        \n        if (errorX > this.blockSize || errorY > this.blockSize) {\n            console.warn(`⚠️ 点击误差过大，可能存在坐标系问题`);\n        }\n        \n        console.log(`🔄 ===== 坐标转换结束 =====\\n`);\n        \n        return { row, col };\n    }\n    \n    /**\n     * 获取指定位置的方块数据\n     */\n    getBlockAt(row: number, col: number): BlockData | null {\n        if (this.isValidPosition(row, col)) {\n            return this.boardData[row][col];\n        }\n        return null;\n    }\n    \n    /**\n     * 获取指定位置的方块节点\n     */\n    getBlockNodeAt(row: number, col: number): Node | null {\n        const blockData = this.getBlockAt(row, col);\n        return blockData ? blockData.node : null;\n    }\n    \n    /**\n     * 检查位置是否有效\n     */\n    isValidPosition(row: number, col: number): boolean {\n        return row >= 0 && row < this.boardSize && col >= 0 && col < this.boardSize;\n    }\n    \n    /**\n     * 检查位置是否为空\n     */\n    isEmpty(row: number, col: number): boolean {\n        if (!this.isValidPosition(row, col)) return false;\n        return this.boardData[row][col].type === -1;\n    }\n    \n    /**\n     * 移除指定的方块\n     */\n    removeBlocks(blocks: {row: number, col: number}[]) {\n        blocks.forEach(({row, col}) => {\n            if (this.isValidPosition(row, col)) {\n                // 注意：节点已在动画中移除，这里只清理数据\n                this.boardData[row][col] = {\n                    type: -1,\n                    node: null\n                };\n            }\n        });\n    }\n    \n    /**\n     * 移动方块到新位置\n     */\n    moveBlock(fromRow: number, fromCol: number, toRow: number, toCol: number): boolean {\n        if (!this.isValidPosition(fromRow, fromCol) || !this.isValidPosition(toRow, toCol)) {\n            return false;\n        }\n        \n        if (this.isEmpty(fromRow, fromCol) || !this.isEmpty(toRow, toCol)) {\n            return false;\n        }\n        \n        // 移动数据\n        this.boardData[toRow][toCol] = this.boardData[fromRow][fromCol];\n        this.boardData[fromRow][fromCol] = {\n            type: -1,\n            node: null\n        };\n        \n        // 更新节点位置\n        const blockNode = this.boardData[toRow][toCol].node;\n        if (blockNode) {\n            const newPos = this.gridToLocal(toRow, toCol);\n            blockNode.setPosition(newPos);\n            blockNode.name = `Block_${toRow}_${toCol}`;\n        }\n        \n        return true;\n    }\n    \n    /**\n     * 获取整个棋盘数据\n     */\n    getBoardData(): BlockData[][] {\n        return this.boardData;\n    }\n    \n    /**\n     * 计算剩余方块数量\n     */\n    countRemainingBlocks(): number {\n        let count = 0;\n        for (let row = 0; row < this.boardSize; row++) {\n            for (let col = 0; col < this.boardSize; col++) {\n                if (!this.isEmpty(row, col)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    \n    /**\n     * 获取指定列的空位数量（从底部开始计算）\n     */\n    getEmptySpacesInColumn(col: number): number {\n        let emptyCount = 0;\n        for (let row = this.boardSize - 1; row >= 0; row--) {\n            if (this.isEmpty(row, col)) {\n                emptyCount++;\n            } else {\n                break;\n            }\n        }\n        return emptyCount;\n    }\n    \n    /**\n     * 获取指定列的方块列表（从上到下，忽略空位）\n     */\n    getColumnBlocks(col: number): {row: number, data: BlockData}[] {\n        const blocks: {row: number, data: BlockData}[] = [];\n        for (let row = 0; row < this.boardSize; row++) {\n            if (!this.isEmpty(row, col)) {\n                blocks.push({\n                    row: row,\n                    data: this.boardData[row][col]\n                });\n            }\n        }\n        return blocks;\n    }\n    \n    /**\n     * 检查列是否完全为空\n     */\n    isColumnEmpty(col: number): boolean {\n        for (let row = 0; row < this.boardSize; row++) {\n            if (!this.isEmpty(row, col)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    /**\n     * 获取最右侧非空列的索引\n     */\n    getRightmostNonEmptyColumn(): number {\n        for (let col = this.boardSize - 1; col >= 0; col--) {\n            if (!this.isColumnEmpty(col)) {\n                return col;\n            }\n        }\n        return -1; // 所有列都为空\n    }\n    \n    /**\n     * 调试：打印棋盘状态\n     */\n    debugPrintBoard() {\n        console.log('📋 当前棋盘状态:');\n        for (let row = 0; row < this.boardSize; row++) {\n            let rowStr = '';\n            for (let col = 0; col < this.boardSize; col++) {\n                const type = this.boardData[row][col].type;\n                rowStr += (type === -1 ? '.' : type.toString()) + ' ';\n            }\n            console.log(rowStr);\n        }\n    }\n}\n"]}