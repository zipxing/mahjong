{"version":3,"sources":["file:///Users/xinzhou/work/mahjong/star/assets/scripts/BlockManager.ts"],"names":["BlockManager","Node","Sprite","SpriteFrame","instantiate","UITransform","Color","_decorator","Texture2D","ImageAsset","Rect","ccclass","property","blockAtlas","blockTypeCount","blockColors","init","Math","min","length","console","log","createBlockNode","blockType","blockSize","error","blockNode","transform","addComponent","setContentSize","sprite","setupBlockAppearance","spriteFrameName","spriteFrame","getSpriteFrame","warn","setupColorBlock","color","toHEX","fallbackError","createDefaultSpriteFrame","size","canvas","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","texture","imageAsset","_nativeAsset","image","rect","cloneBlockNode","originalNode","clonedNode","name","getBlockTypeCount","getBlockColor","WHITE","setBlockOpacity","opacity","getComponent","clone","a","setBlockHighlight","highlight","r","g","b","blockName","typeMatch","match","parseInt","getBlockTypeFromNode","isValidBlockType","getRandomBlockType","floor","random","debugPrintBlockInfo"],"mappings":"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","sourcesContent":["/**\n * 方块管理器\n * 负责管理彩色方块的创建、显示和类型管理\n */\n\nimport { Node, SpriteAtlas, Sprite, SpriteFrame, instantiate, UITransform, Color, _decorator, Texture2D, ImageAsset, Rect } from 'cc';\nconst { ccclass, property } = _decorator;\n\nexport class BlockManager {\n    private blockAtlas: SpriteAtlas = null!;\n    private blockTypeCount: number = 5;\n    \n    // 预定义的颜色方案（如果没有图集的话）\n    private blockColors: Color[] = [\n        new Color(255, 100, 100, 255),  // 红色\n        new Color(100, 255, 100, 255),  // 绿色\n        new Color(100, 100, 255, 255),  // 蓝色\n        new Color(255, 255, 100, 255),  // 黄色\n        new Color(255, 100, 255, 255),  // 紫色\n        new Color(100, 255, 255, 255),  // 青色\n        new Color(255, 150, 100, 255),  // 橙色\n        new Color(150, 150, 150, 255),  // 灰色\n    ];\n    \n    /**\n     * 初始化方块管理器\n     */\n    init(blockAtlas: SpriteAtlas | null, blockTypeCount: number) {\n        this.blockAtlas = blockAtlas;\n        this.blockTypeCount = Math.min(blockTypeCount, this.blockColors.length);\n        \n        console.log(`✅ 方块管理器初始化完成，方块类型数: ${this.blockTypeCount}`);\n        \n        if (!this.blockAtlas) {\n            console.log('⚠️ 未设置方块图集，将使用纯色方块');\n        }\n    }\n    \n    /**\n     * 创建指定类型的方块节点\n     */\n    createBlockNode(blockType: number, blockSize: number = 60): Node | null {\n        if (blockType < 0 || blockType >= this.blockTypeCount) {\n            console.error(`❌ 无效的方块类型: ${blockType}`);\n            return null;\n        }\n        \n        // 创建新节点\n        const blockNode = new Node(`Block_Type_${blockType}`);\n        \n        // 添加UITransform组件\n        const transform = blockNode.addComponent(UITransform);\n        transform.setContentSize(blockSize, blockSize);  // 使用动态方块大小\n        \n        // 添加Sprite组件\n        const sprite = blockNode.addComponent(Sprite);\n        \n        // 设置方块外观\n        this.setupBlockAppearance(sprite, blockType, blockSize);\n        \n        return blockNode;\n    }\n    \n    /**\n     * 设置方块外观\n     */\n    private setupBlockAppearance(sprite: Sprite, blockType: number, blockSize: number) {\n        console.log(`🎨 开始设置方块外观: Type ${blockType}, Size ${blockSize}px`);\n        \n        try {\n            if (this.blockAtlas) {\n                // 使用图集中的sprite frame\n                const spriteFrameName = `block_${blockType}`;\n                const spriteFrame = this.blockAtlas.getSpriteFrame(spriteFrameName);\n                \n                if (spriteFrame) {\n                    sprite.spriteFrame = spriteFrame;\n                    console.log(`🎨 使用图集sprite: ${spriteFrameName}`);\n                } else {\n                    console.warn(`⚠️ 图集中未找到 ${spriteFrameName}，使用纯色方块`);\n                    this.setupColorBlock(sprite, blockType, blockSize);\n                }\n            } else {\n                // 使用纯色方块\n                console.log(`🎨 使用纯色方块模式`);\n                this.setupColorBlock(sprite, blockType, blockSize);\n            }\n            console.log(`✅ 方块外观设置完成`);\n        } catch (error) {\n            console.error(`❌ 设置方块外观时出错:`, error);\n            // 简单的回退方案：只设置颜色，不使用SpriteFrame\n            try {\n                sprite.color = this.blockColors[blockType] || this.blockColors[0];\n                console.log(`🔧 使用简单颜色回退方案: ${sprite.color.toHEX()}`);\n            } catch (fallbackError) {\n                console.error(`❌ 回退方案也失败:`, fallbackError);\n            }\n        }\n    }\n    \n    /**\n     * 设置纯色方块\n     */\n    private setupColorBlock(sprite: Sprite, blockType: number, blockSize: number) {\n        console.log(`🎨 开始设置纯色方块: Type ${blockType}, Size ${blockSize}px`);\n        \n        try {\n            // 创建与方块尺寸匹配的纹理\n            console.log(`🔧 创建SpriteFrame...`);\n            this.createDefaultSpriteFrame(sprite, blockSize);\n            \n            // 设置颜色\n            if (blockType < this.blockColors.length) {\n                sprite.color = this.blockColors[blockType];\n                console.log(`🎨 设置方块颜色: Type ${blockType} -> ${this.blockColors[blockType].toHEX()}`);\n            } else {\n                console.warn(`⚠️ 方块类型超出范围: ${blockType}，使用默认颜色`);\n                sprite.color = this.blockColors[0];\n            }\n            console.log(`✅ 纯色方块设置完成`);\n        } catch (error) {\n            console.error(`❌ 设置纯色方块时出错:`, error);\n            console.log(`🔧 尝试最简单的颜色设置...`);\n            sprite.color = this.blockColors[0]; // 红色作为回退\n        }\n    }\n    \n    /**\n     * 创建与UITransform尺寸匹配的SpriteFrame\n     */\n    private createDefaultSpriteFrame(sprite: Sprite, size: number = 40) {\n        // 使用与UITransform相同的尺寸，带1px白边框\n        const canvas = document.createElement('canvas');\n        canvas.width = size;\n        canvas.height = size;\n        const ctx = canvas.getContext('2d')!;\n        \n        // 填充白色背景（边框）\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, size, size);\n        \n        // 填充内部区域（留出1px边框）\n        ctx.fillStyle = 'gray'; // 灰色内部，颜色会被Sprite.color覆盖\n        ctx.fillRect(1, 1, size-2, size-2);\n        \n        // 创建纹理\n        const texture = new Texture2D();\n        const imageAsset = new ImageAsset();\n        imageAsset._nativeAsset = canvas;\n        texture.image = imageAsset;\n        \n        // 创建SpriteFrame\n        const spriteFrame = new SpriteFrame();\n        spriteFrame.texture = texture;\n        spriteFrame.rect = new Rect(0, 0, size, size);\n        \n        sprite.spriteFrame = spriteFrame;\n        console.log(`✅ 创建尺寸匹配的SpriteFrame成功: ${size}×${size}px`);\n    }\n    \n    /**\n     * 创建方块的复制品（用于动画等）\n     */\n    cloneBlockNode(originalNode: Node): Node | null {\n        if (!originalNode) return null;\n        \n        const clonedNode = instantiate(originalNode);\n        clonedNode.name = originalNode.name + '_Clone';\n        \n        return clonedNode;\n    }\n    \n    /**\n     * 获取方块类型数量\n     */\n    getBlockTypeCount(): number {\n        return this.blockTypeCount;\n    }\n    \n    /**\n     * 获取方块颜色\n     */\n    getBlockColor(blockType: number): Color {\n        if (blockType >= 0 && blockType < this.blockColors.length) {\n            return this.blockColors[blockType];\n        }\n        return Color.WHITE;\n    }\n    \n    /**\n     * 设置方块的透明度\n     */\n    setBlockOpacity(blockNode: Node, opacity: number) {\n        const sprite = blockNode.getComponent(Sprite);\n        if (sprite) {\n            const color = sprite.color.clone();\n            color.a = opacity;\n            sprite.color = color;\n        }\n    }\n    \n    /**\n     * 设置方块的高亮效果\n     */\n    setBlockHighlight(blockNode: Node, highlight: boolean) {\n        const sprite = blockNode.getComponent(Sprite);\n        if (sprite) {\n            if (highlight) {\n                // 高亮：增加亮度\n                const color = sprite.color.clone();\n                color.r = Math.min(255, color.r * 1.2);\n                color.g = Math.min(255, color.g * 1.2);\n                color.b = Math.min(255, color.b * 1.2);\n                sprite.color = color;\n            } else {\n                // 恢复原色：需要知道原始类型\n                // 这里简化处理，实际项目中可能需要存储原始颜色\n                const blockName = blockNode.name;\n                const typeMatch = blockName.match(/Block_Type_(\\d+)/);\n                if (typeMatch) {\n                    const blockType = parseInt(typeMatch[1]);\n                    this.setupBlockAppearance(sprite, blockType);\n                }\n            }\n        }\n    }\n    \n    /**\n     * 获取方块类型（从节点名称解析）\n     */\n    getBlockTypeFromNode(blockNode: Node): number {\n        const blockName = blockNode.name;\n        const typeMatch = blockName.match(/Block_Type_(\\d+)/);\n        if (typeMatch) {\n            return parseInt(typeMatch[1]);\n        }\n        return -1;\n    }\n    \n    /**\n     * 验证方块类型是否有效\n     */\n    isValidBlockType(blockType: number): boolean {\n        return blockType >= 0 && blockType < this.blockTypeCount;\n    }\n    \n    /**\n     * 获取随机方块类型\n     */\n    getRandomBlockType(): number {\n        return Math.floor(Math.random() * this.blockTypeCount);\n    }\n    \n    /**\n     * 调试：打印方块信息\n     */\n    debugPrintBlockInfo(blockNode: Node) {\n        const blockType = this.getBlockTypeFromNode(blockNode);\n        const sprite = blockNode.getComponent(Sprite);\n        const color = sprite ? sprite.color : null;\n        \n        console.log(`🔍 方块信息: ${blockNode.name}, Type: ${blockType}, Color: ${color?.toHEX()}`);\n    }\n}\n"]}