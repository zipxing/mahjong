{"version":3,"sources":["file:///Users/xinzhou/work/mahjong/star/assets/scripts/InputManager.ts"],"names":["InputManager","Vec3","input","Input","UITransform","ccFind","find","inputInterface","isInputEnabled","isMouseDown","lastClickTime","clickDelay","highlightedBlocks","isHighlightActive","init","setupInputEvents","console","log","on","EventType","TOUCH_START","onTouchStart","TOUCH_END","onTouchEnd","TOUCH_MOVE","onTouchMove","MOUSE_DOWN","onMouseDown","MOUSE_UP","onMouseUp","event","isGameActive","touchPos","getUILocation","x","y","worldPos","uiToWorldPosition","handlePointerDown","handlePointerUp","clearHighlight","mousePos","toFixed","trace","gridPos","screenToGridPosition","row","col","blockData","getBlockAt","type","highlightConnectedBlocks","currentTime","Date","now","onBlockClick","connectedBlocks","findConnectedBlocks","length","startRow","startCol","boardData","getBoardData","boardSize","isValidPosition","targetType","visited","i","Array","fill","queue","push","directions","dr","dc","current","shift","dir","newRow","newCol","uiPos","canvas","error","canvasTransform","getComponent","warn","addComponent","worldX","worldY","designSize","contentSize","width","height","isPortrait","setContentSize","enableInput","disableInput","getHighlightedBlocks","hasHighlight","destroy","off","debugPrintInputState"],"mappings":"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","sourcesContent":["/**\n * 输入管理器\n * 负责处理触摸输入和点击事件\n */\n\nimport { Node, Vec3, input, Input, EventTouch, Camera, UITransform, find as ccFind } from 'cc';\nimport { BlockData } from './BoardManager';\n\nexport interface InputInterface {\n    getBoardData(): BlockData[][];\n    getBlockAt(row: number, col: number): BlockData | null;\n    screenToGridPosition(screenPos: Vec3): {row: number, col: number};\n    onBlockClick(row: number, col: number): void;\n    isGameActive(): boolean;\n}\n\nexport class InputManager {\n    private inputInterface: InputInterface = null!;\n    private isInputEnabled: boolean = true;\n    \n    // 触摸状态\n    private isMouseDown: boolean = false;\n    private lastClickTime: number = 0;\n    private clickDelay: number = 100; // 防止重复点击的延迟（毫秒）\n    \n    // 高亮状态\n    private highlightedBlocks: {row: number, col: number}[] = [];\n    private isHighlightActive: boolean = false;\n    \n    /**\n     * 初始化输入管理器\n     */\n    init(inputInterface: InputInterface) {\n        this.inputInterface = inputInterface;\n        this.setupInputEvents();\n        \n        console.log('✅ 输入管理器初始化完成');\n    }\n    \n    /**\n     * 设置输入事件监听\n     */\n    private setupInputEvents() {\n        // 监听触摸开始\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\n        \n        // 监听触摸结束\n        input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\n        \n        // 监听触摸移动（用于取消高亮）\n        input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        \n        // 监听鼠标点击（用于桌面端）\n        input.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);\n        input.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);\n        \n        console.log('🎮 输入事件监听已设置');\n    }\n    \n    /**\n     * 触摸开始事件\n     */\n    private onTouchStart(event: EventTouch) {\n        if (!this.isInputEnabled || !this.inputInterface.isGameActive()) {\n            return;\n        }\n        \n        this.isMouseDown = true;\n        \n        const touchPos = event.getUILocation();\n        console.log(`📱 触摸UI坐标: (${touchPos.x}, ${touchPos.y})`);\n        \n        // 将UI坐标转换为世界坐标\n        const worldPos = this.uiToWorldPosition(touchPos);\n        console.log(`🌍 转换后世界坐标: (${worldPos.x}, ${worldPos.y})`);\n        \n        this.handlePointerDown(worldPos);\n    }\n    \n    /**\n     * 触摸结束事件\n     */\n    private onTouchEnd(event: EventTouch) {\n        if (!this.isInputEnabled || !this.inputInterface.isGameActive()) {\n            return;\n        }\n        \n        this.isMouseDown = false;\n        \n        const touchPos = event.getUILocation();\n        console.log(`📱 触摸UI坐标: (${touchPos.x}, ${touchPos.y})`);\n        \n        // 将UI坐标转换为世界坐标\n        const worldPos = this.uiToWorldPosition(touchPos);\n        console.log(`🌍 转换后世界坐标: (${worldPos.x}, ${worldPos.y})`);\n        \n        this.handlePointerUp(worldPos);\n    }\n    \n    /**\n     * 触摸移动事件\n     */\n    private onTouchMove(event: EventTouch) {\n        if (!this.isInputEnabled || !this.inputInterface.isGameActive() || !this.isMouseDown) {\n            return;\n        }\n        \n        // 如果正在拖拽，清除高亮\n        this.clearHighlight();\n    }\n    \n    /**\n     * 鼠标按下事件\n     */\n    private onMouseDown(event: EventTouch) {\n        if (!this.isInputEnabled || !this.inputInterface.isGameActive()) {\n            return;\n        }\n        \n        this.isMouseDown = true;\n        \n        const mousePos = event.getUILocation();\n        console.log(`🖱️ 鼠标UI坐标: (${mousePos.x}, ${mousePos.y})`);\n        \n        // 将UI坐标转换为世界坐标\n        const worldPos = this.uiToWorldPosition(mousePos);\n        console.log(`🌍 转换后世界坐标: (${worldPos.x}, ${worldPos.y})`);\n        \n        this.handlePointerDown(worldPos);\n    }\n    \n    /**\n     * 鼠标释放事件\n     */\n    private onMouseUp(event: EventTouch) {\n        if (!this.isInputEnabled || !this.inputInterface.isGameActive()) {\n            return;\n        }\n        \n        this.isMouseDown = false;\n        \n        const mousePos = event.getUILocation();\n        console.log(`🖱️ 鼠标UI坐标: (${mousePos.x}, ${mousePos.y})`);\n        \n        // 将UI坐标转换为世界坐标\n        const worldPos = this.uiToWorldPosition(mousePos);\n        console.log(`🌍 转换后世界坐标: (${worldPos.x}, ${worldPos.y})`);\n        \n        this.handlePointerUp(worldPos);\n    }\n    \n    /**\n     * 处理指针按下\n     */\n    private handlePointerDown(worldPos: Vec3) {\n        console.log(`\\n👆 ===== 指针按下事件 =====`);\n        console.log(`📍 世界坐标: (${worldPos.x.toFixed(1)}, ${worldPos.y.toFixed(1)})`);\n        console.log(`🔍 调用来源跟踪:`);\n        console.trace();\n        \n        const gridPos = this.inputInterface.screenToGridPosition(worldPos);\n        console.log(`🎯 网格坐标: (${gridPos.row}, ${gridPos.col})`);\n        \n        const blockData = this.inputInterface.getBlockAt(gridPos.row, gridPos.col);\n        console.log(`📦 方块数据:`, blockData);\n        \n        if (blockData && blockData.type !== -1) {\n            console.log(`👆 按下方块: (${gridPos.row}, ${gridPos.col}), 类型: ${blockData.type}`);\n            \n            // 高亮连通区域作为预览\n            this.highlightConnectedBlocks(gridPos.row, gridPos.col);\n        } else {\n            console.log(`❌ 按下了空位置或无效位置`);\n        }\n        console.log(`👆 ===== 指针按下事件结束 =====\\n`);\n    }\n    \n    /**\n     * 处理指针释放\n     */\n    private handlePointerUp(worldPos: Vec3) {\n        console.log(`\\n👆 ===== 指针释放事件 =====`);\n        console.log(`📍 世界坐标: (${worldPos.x.toFixed(1)}, ${worldPos.y.toFixed(1)})`);\n        \n        // 防止重复点击\n        const currentTime = Date.now();\n        console.log(`⏰ 当前时间: ${currentTime}, 上次点击: ${this.lastClickTime}, 间隔: ${currentTime - this.lastClickTime}ms`);\n        \n        if (currentTime - this.lastClickTime < this.clickDelay) {\n            console.log(`❌ 点击间隔太短，忽略此次点击 (< ${this.clickDelay}ms)`);\n            return;\n        }\n        this.lastClickTime = currentTime;\n        \n        const gridPos = this.inputInterface.screenToGridPosition(worldPos);\n        console.log(`🎯 网格坐标: (${gridPos.row}, ${gridPos.col})`);\n        \n        const blockData = this.inputInterface.getBlockAt(gridPos.row, gridPos.col);\n        console.log(`📦 方块数据:`, blockData);\n        \n        if (blockData && blockData.type !== -1) {\n            console.log(`👆 确认点击方块: (${gridPos.row}, ${gridPos.col}), 类型: ${blockData.type}`);\n            \n            // 清除高亮\n            this.clearHighlight();\n            \n            // 执行点击回调\n            console.log(`🔄 调用游戏逻辑处理点击...`);\n            this.inputInterface.onBlockClick(gridPos.row, gridPos.col);\n        } else {\n            console.log(`👆 点击空位: (${gridPos.row}, ${gridPos.col})`);\n            this.clearHighlight();\n        }\n        console.log(`👆 ===== 指针释放事件结束 =====\\n`);\n    }\n    \n    /**\n     * 高亮连通的方块\n     */\n    private highlightConnectedBlocks(row: number, col: number) {\n        // 清除之前的高亮\n        this.clearHighlight();\n        \n        // 获取连通区域（简化版，实际应该调用EliminationManager）\n        const connectedBlocks = this.findConnectedBlocks(row, col);\n        \n        if (connectedBlocks.length >= 2) {\n            this.highlightedBlocks = connectedBlocks;\n            this.isHighlightActive = true;\n            \n            // 实际的高亮逻辑应该通过回调接口实现\n            console.log(`✨ 高亮 ${connectedBlocks.length} 个连通方块`);\n        }\n    }\n    \n    /**\n     * 简化版连通区域查找（实际应该委托给EliminationManager）\n     */\n    private findConnectedBlocks(startRow: number, startCol: number): {row: number, col: number}[] {\n        const boardData = this.inputInterface.getBoardData();\n        const boardSize = boardData.length;\n        \n        if (!this.isValidPosition(startRow, startCol, boardSize) || \n            boardData[startRow][startCol].type === -1) {\n            return [];\n        }\n        \n        const targetType = boardData[startRow][startCol].type;\n        const visited: boolean[][] = [];\n        const connectedBlocks: {row: number, col: number}[] = [];\n        \n        // 初始化访问标记\n        for (let i = 0; i < boardSize; i++) {\n            visited[i] = new Array(boardSize).fill(false);\n        }\n        \n        // BFS队列\n        const queue: {row: number, col: number}[] = [{row: startRow, col: startCol}];\n        visited[startRow][startCol] = true;\n        connectedBlocks.push({row: startRow, col: startCol});\n        \n        // 四个方向\n        const directions = [\n            {dr: -1, dc: 0},  // 上\n            {dr: 1, dc: 0},   // 下\n            {dr: 0, dc: -1},  // 左\n            {dr: 0, dc: 1}    // 右\n        ];\n        \n        while (queue.length > 0) {\n            const current = queue.shift()!;\n            \n            for (const dir of directions) {\n                const newRow = current.row + dir.dr;\n                const newCol = current.col + dir.dc;\n                \n                if (!this.isValidPosition(newRow, newCol, boardSize) ||\n                    visited[newRow][newCol] ||\n                    boardData[newRow][newCol].type !== targetType) {\n                    continue;\n                }\n                \n                visited[newRow][newCol] = true;\n                queue.push({row: newRow, col: newCol});\n                connectedBlocks.push({row: newRow, col: newCol});\n            }\n        }\n        \n        return connectedBlocks;\n    }\n    \n    /**\n     * 检查位置是否有效\n     */\n    private isValidPosition(row: number, col: number, boardSize: number): boolean {\n        return row >= 0 && row < boardSize && col >= 0 && col < boardSize;\n    }\n    \n    /**\n     * 清除高亮显示\n     */\n    private clearHighlight() {\n        if (this.isHighlightActive) {\n            console.log('🧹 清除方块高亮');\n            this.highlightedBlocks = [];\n            this.isHighlightActive = false;\n        }\n    }\n    \n    /**\n     * UI坐标转换为世界坐标\n     */\n    private uiToWorldPosition(uiPos: {x: number, y: number}): Vec3 {\n        // 获取Canvas节点\n        const canvas = ccFind('Canvas');\n        if (!canvas) {\n            console.error('❌ 找不到Canvas节点');\n            return new Vec3(uiPos.x, uiPos.y, 0);\n        }\n        \n        // 获取Canvas的UITransform\n        let canvasTransform = canvas.getComponent(UITransform);\n        if (!canvasTransform) {\n            console.warn('⚠️ Canvas没有UITransform组件，尝试添加...');\n            canvasTransform = canvas.addComponent(UITransform);\n            if (!canvasTransform) {\n                console.error('❌ 无法为Canvas添加UITransform组件，使用默认坐标转换');\n                // 使用竖屏尺寸作为后备方案\n                const worldX = uiPos.x - 360;  // 假设720宽度，中心为360\n                const worldY = (1280 - uiPos.y) - 640;  // 假设1280高度，Y轴翻转，中心为640\n                console.log(`🔄 默认坐标转换(竖屏): UI(${uiPos.x}, ${uiPos.y}) -> World(${worldX}, ${worldY})`);\n                return new Vec3(worldX, worldY, 0);\n            }\n        }\n        \n        // 检查Canvas尺寸，但优先使用编辑器设置\n        let designSize = canvasTransform.contentSize;\n        console.log(`📐 当前Canvas尺寸: ${designSize.width} x ${designSize.height}`);\n        \n        // 判断屏幕方向\n        const isPortrait = designSize.height > designSize.width;\n        console.log(`📱 屏幕方向: ${isPortrait ? '竖屏' : '横屏'}`);\n        \n        if (designSize.width === 100 && designSize.height === 100) {\n            // 只有在默认尺寸时才自动设置，推荐在编辑器中手动设置\n            console.log('🔧 检测到默认尺寸，建议在编辑器中设置Canvas为720x1280');\n            console.log('📝 临时设置为竖屏分辨率...');\n            canvasTransform.setContentSize(720, 1280);  // 竖屏：宽720，高1280\n            designSize = canvasTransform.contentSize;  // 重新获取更新后的尺寸\n            console.log('✅ Canvas尺寸已临时设置为 720 x 1280 (竖屏)');\n        }\n        \n        console.log(`📐 最终Canvas设计尺寸: ${designSize.width} x ${designSize.height}`);\n        \n        // 将UI坐标转换为世界坐标（相对于Canvas中心）\n        // 注意：Cocos Creator的UI坐标原点在左下角，世界坐标中心在Canvas中心\n        // 但是鼠标/触摸坐标可能是从左上角开始的，需要Y轴翻转\n        const worldX = uiPos.x - designSize.width / 2;\n        \n        // 检查Y轴方向：如果UI坐标很大（接近屏幕高度），说明是从上到下的坐标系\n        let worldY;\n        if (uiPos.y > designSize.height * 0.5) {\n            // 可能是从左上角开始的坐标系，需要Y轴翻转\n            worldY = (designSize.height - uiPos.y) - designSize.height / 2;\n            console.log(`🔄 Y轴翻转模式: UI_Y=${uiPos.y} -> Flipped_Y=${designSize.height - uiPos.y} -> World_Y=${worldY.toFixed(1)}`);\n        } else {\n            // 正常的从左下角开始的坐标系\n            worldY = uiPos.y - designSize.height / 2;\n            console.log(`🔄 Y轴正常模式: UI_Y=${uiPos.y} -> World_Y=${worldY.toFixed(1)}`);\n        }\n        \n        console.log(`🔄 最终坐标转换: UI(${uiPos.x}, ${uiPos.y}) -> World(${worldX}, ${worldY})`);\n        \n        return new Vec3(worldX, worldY, 0);\n    }\n    \n    /**\n     * 启用输入\n     */\n    enableInput() {\n        this.isInputEnabled = true;\n        console.log('✅ 输入已启用');\n    }\n    \n    /**\n     * 禁用输入\n     */\n    disableInput() {\n        this.isInputEnabled = false;\n        this.clearHighlight();\n        console.log('❌ 输入已禁用');\n    }\n    \n    /**\n     * 获取当前高亮的方块\n     */\n    getHighlightedBlocks(): {row: number, col: number}[] {\n        return [...this.highlightedBlocks];\n    }\n    \n    /**\n     * 检查是否有高亮显示\n     */\n    hasHighlight(): boolean {\n        return this.isHighlightActive;\n    }\n    \n    /**\n     * 销毁输入管理器\n     */\n    destroy() {\n        // 移除事件监听\n        input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);\n        input.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);\n        input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        input.off(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);\n        input.off(Input.EventType.MOUSE_UP, this.onMouseUp, this);\n        \n        // 清除状态\n        this.clearHighlight();\n        \n        console.log('🗑️ 输入管理器已销毁');\n    }\n    \n    /**\n     * 调试：打印输入状态\n     */\n    debugPrintInputState() {\n        console.log('🎮 输入状态:');\n        console.log(`  输入启用: ${this.isInputEnabled}`);\n        console.log(`  鼠标按下: ${this.isMouseDown}`);\n        console.log(`  高亮激活: ${this.isHighlightActive}`);\n        console.log(`  高亮方块数: ${this.highlightedBlocks.length}`);\n    }\n}\n"]}