{"version":3,"sources":["file:///Users/xinzhou/work/mahjong/star/assets/scripts/GameManager.ts"],"names":["_decorator","Component","Node","Vec3","Label","tween","SpriteAtlas","BoardManager","BlockManager","EliminationManager","PhysicsManager","InputManager","ScoreManager","UIManager","GameStateManager","GameState","ccclass","property","GameManager","boardManager","blockManager","eliminationManager","physicsManager","inputManager","scoreManager","uiManager","gameStateManager","currentScore","isGameOver","isProcessing","onLoad","console","log","initManagers","start","startNewGame","init","gameBoard","boardSize","blockSize","blockSpacing","blockAtlas","blockTypes","targetScore","scoreLabel","targetScoreLabel","gameOverPanel","finalScoreLabel","setCallbacks","onRestart","restartGame","onHint","showHint","onPause","togglePause","getBoardData","getBlockAt","row","col","screenToGridPosition","screenPos","onBlockClick","handleBlockClick","isGameActive","canPerformGameAction","generateBoard","updateGameUI","getCurrentState","clickedBlock","type","connectedBlocks","findConnectedBlocks","length","forEach","block","index","score","calculateEliminationScore","recordElimination","animateElimination","removeBlocks","rearrangeBoard","checkGameState","error","stack","blocks","Promise","resolve","completedAnimations","totalAnimations","blockNode","getBlockNodeAt","to","scale","easing","call","removeFromParent","setTimeout","warn","gameData","getGameData","updateGameState","isGameEnded","remainingBlocks","moveCount","updateScoreDisplay","countRemainingBlocks","updateGameData","endGame","hasValidMoves","isVictory","bonusScore","calculateBonusScore","boardData","largestRegion","maxSize","region","PLAYING","pauseGame","disableInput","PAUSED","resumeGame","enableInput","getCurrentScore","getGameState"],"mappings":"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","sourcesContent":["/**\n * 消灭星星游戏 - Cocos Creator版本\n * \n * 主要特性：\n * - 10x10棋盘，多种彩色方块\n * - 点击连接的同色方块进行消除\n * - 方块下落和左移物理效果\n * - 得分系统：(n-2)² 公式计算\n * - 剩余方块奖励系统\n * - 完整的触摸事件处理\n * \n * 技术要点：\n * - 使用Tween系统实现动画效果\n * - 完善的错误处理和安全检查\n * - 智能的连通区域检测算法\n * - 基于物理规律的方块重排系统\n * \n * @author Zipxing & Cursor\n * @version 1.0\n * @date 2025-01-11\n */\n\nimport { _decorator, Component, Node, Vec3, Color, Label, UITransform, Vec2, tween, UIOpacity, Sprite, SpriteFrame, SpriteAtlas } from 'cc';\nimport { BoardManager } from './BoardManager';\nimport { BlockManager } from './BlockManager';\nimport { EliminationManager } from './EliminationManager';\nimport { PhysicsManager } from './PhysicsManager';\nimport { InputManager } from './InputManager';\nimport { ScoreManager } from './ScoreManager';\nimport { UIManager } from './UIManager';\nimport { GameStateManager, GameState } from './GameStateManager';\nconst { ccclass, property } = _decorator;\n\n/**\n * 消灭星星游戏管理器\n * \n * 核心功能：\n * - 10x10棋盘生成与渲染\n * - 点击连通区域检测与消除\n * - 方块下落与左移重排\n * - 得分计算与游戏状态管理\n * - 高亮显示与视觉反馈\n */\n@ccclass('GameManager')\nexport class GameManager extends Component {\n    \n    // ==================== 组件引用 ====================\n    @property(Node)\n    gameBoard: Node = null!;  // 游戏棋盘根节点\n    \n    @property(SpriteAtlas)\n    blockAtlas: SpriteAtlas = null!;  // 方块图集\n    \n    @property(Label)\n    scoreLabel: Label = null!;  // 分数显示标签\n    \n    @property(Label)\n    targetScoreLabel: Label = null!;  // 目标分数标签\n    \n    @property(Node)\n    gameOverPanel: Node = null!;  // 游戏结束面板\n    \n    @property(Label)\n    finalScoreLabel: Label = null!;  // 最终分数标签\n    \n    // ==================== 游戏配置 ====================\n    @property\n    boardSize: number = 10;  // 棋盘大小（10x10）\n    \n    @property\n    blockTypes: number = 5;  // 方块类型数量\n    \n    @property\n    targetScore: number = 1000;  // 目标分数\n    \n    @property\n    blockSize: number = 35;  // 方块大小（竖屏适配，保守尺寸）\n    \n    @property\n    blockSpacing: number = 2;  // 方块间距（竖屏适配，紧凑）\n    \n    // ==================== 管理器实例 ====================\n    private boardManager: BoardManager = null!;\n    private blockManager: BlockManager = null!;\n    private eliminationManager: EliminationManager = null!;\n    private physicsManager: PhysicsManager = null!;\n    private inputManager: InputManager = null!;\n    private scoreManager: ScoreManager = null!;\n    private uiManager: UIManager = null!;\n    private gameStateManager: GameStateManager = null!;\n    \n    // ==================== 游戏状态 ====================\n    private currentScore: number = 0;\n    private isGameOver: boolean = false;\n    private isProcessing: boolean = false;  // 防止多次操作\n    \n    onLoad() {\n        console.log('🎮 消灭星星游戏加载中...');\n        this.initManagers();\n    }\n    \n    start() {\n        console.log('🎮 消灭星星游戏开始');\n        this.startNewGame();\n    }\n    \n    /**\n     * 初始化所有管理器\n     */\n    private initManagers() {\n        // 创建管理器实例\n        this.boardManager = new BoardManager();\n        this.blockManager = new BlockManager();\n        this.eliminationManager = new EliminationManager();\n        this.physicsManager = new PhysicsManager();\n        this.scoreManager = new ScoreManager();\n        this.uiManager = new UIManager();\n        this.gameStateManager = new GameStateManager();\n        \n        // 初始化管理器\n        this.boardManager.init(this.gameBoard, this.boardSize, this.blockSize, this.blockSpacing);\n        this.blockManager.init(this.blockAtlas, this.blockTypes);\n        this.eliminationManager.init();\n        this.physicsManager.init();\n        this.scoreManager.init(this.targetScore);\n        this.gameStateManager.init();\n        \n        // 初始化UI管理器\n        this.uiManager.init({\n            scoreLabel: this.scoreLabel,\n            targetScoreLabel: this.targetScoreLabel,\n            gameOverPanel: this.gameOverPanel,\n            finalScoreLabel: this.finalScoreLabel\n        });\n        \n        // 设置UI回调\n        this.uiManager.setCallbacks({\n            onRestart: () => this.restartGame(),\n            onHint: () => this.showHint(),\n            onPause: () => this.togglePause()\n        });\n        \n        // 创建输入管理器并传入回调接口\n        this.inputManager = new InputManager();\n        this.inputManager.init({\n            getBoardData: () => this.boardManager.getBoardData(),\n            getBlockAt: (row: number, col: number) => this.boardManager.getBlockAt(row, col),\n            screenToGridPosition: (screenPos: Vec3) => this.boardManager.screenToGridPosition(screenPos),\n            onBlockClick: (row: number, col: number) => this.handleBlockClick(row, col),\n            isGameActive: () => this.gameStateManager.canPerformGameAction() && !this.isProcessing\n        });\n        \n        console.log('✅ 所有管理器初始化完成');\n    }\n    \n    /**\n     * 开始新游戏\n     */\n    private startNewGame() {\n        console.log('🎯 开始新游戏');\n        \n        // 开始新游戏会话\n        this.gameStateManager.startNewGame(1, this.targetScore);\n        \n        // 重置游戏状态\n        this.currentScore = 0;\n        this.isGameOver = false;\n        this.isProcessing = false;\n        \n        // 生成初始棋盘\n        this.boardManager.generateBoard(this.blockManager);\n        \n        // 更新UI\n        this.updateGameUI();\n        \n        console.log('✅ 新游戏初始化完成');\n    }\n    \n    /**\n     * 处理方块点击\n     */\n    private async handleBlockClick(row: number, col: number) {\n        console.log(`\\n🎯 ===== 方块点击事件开始 =====`);\n        console.log(`🎯 点击位置: (${row}, ${col})`);\n        console.log(`🎮 游戏状态: ${this.gameStateManager.getCurrentState()}`);\n        console.log(`🔒 是否处理中: ${this.isProcessing}`);\n        console.log(`✅ 可以执行操作: ${this.gameStateManager.canPerformGameAction()}`);\n        \n        if (!this.gameStateManager.canPerformGameAction() || this.isProcessing) {\n            console.log(`❌ 无法执行操作，跳过处理`);\n            return;\n        }\n        \n        console.log(`🎯 开始处理方块点击: (${row}, ${col})`);\n        \n        this.isProcessing = true;\n        \n        try {\n            // 获取点击的方块信息\n            const clickedBlock = this.boardManager.getBlockAt(row, col);\n            console.log(`🔍 点击的方块信息:`, clickedBlock);\n            \n            if (!clickedBlock || clickedBlock.type === -1) {\n                console.log(`❌ 点击了空位置，方块类型: ${clickedBlock?.type}`);\n                this.isProcessing = false;\n                return;\n            }\n            \n            console.log(`📦 方块类型: ${clickedBlock.type}`);\n            \n            // 获取连通区域\n            console.log(`🔍 开始查找连通区域...`);\n            const connectedBlocks = this.eliminationManager.findConnectedBlocks(\n                this.boardManager.getBoardData(), \n                row, \n                col\n            );\n            \n            console.log(`🔗 连通区域搜索完成，找到 ${connectedBlocks.length} 个方块`);\n            connectedBlocks.forEach((block, index) => {\n                console.log(`  ${index + 1}. (${block.row}, ${block.col})`);\n            });\n            \n            if (connectedBlocks.length < 2) {\n                console.log('⚠️ 连通区域少于2个方块，无法消除');\n                console.log(`🎯 ===== 方块点击事件结束 (无法消除) =====\\n`);\n                this.isProcessing = false;\n                return;\n            }\n            \n            console.log(`✨ 可以消除！找到 ${connectedBlocks.length} 个连通方块`);\n            \n            // 计算得分\n            const score = this.scoreManager.calculateEliminationScore(connectedBlocks.length);\n            console.log(`💰 得分计算: ${connectedBlocks.length} 个方块 → ${score} 分`);\n            \n            this.currentScore += score;\n            console.log(`📊 当前总分: ${this.currentScore}`);\n            \n            // 记录消除操作到状态管理器\n            this.gameStateManager.recordElimination(connectedBlocks.length, score);\n            console.log(`📝 已记录消除操作到状态管理器`);\n            \n            // 执行消除动画\n            console.log(`🎬 开始消除动画...`);\n            await this.animateElimination(connectedBlocks);\n            console.log(`✅ 消除动画完成`);\n            \n            // 移除方块数据\n            console.log(`🗑️ 移除方块数据...`);\n            this.boardManager.removeBlocks(connectedBlocks);\n            console.log(`✅ 方块数据移除完成`);\n            \n            // 执行物理重排\n            console.log(`🌊 开始物理重排...`);\n            await this.physicsManager.rearrangeBoard(this.boardManager, this.blockManager);\n            console.log(`✅ 物理重排完成`);\n            \n            // 更新显示\n            console.log(`🔄 更新UI显示...`);\n            this.updateGameUI();\n            console.log(`✅ UI更新完成`);\n            \n            // 检查游戏状态\n            console.log(`🔍 检查游戏状态...`);\n            this.checkGameState();\n            console.log(`✅ 游戏状态检查完成`);\n            \n        } catch (error) {\n            console.error('❌ 处理方块点击时出错:', error);\n            console.error('❌ 错误堆栈:', error.stack);\n        } finally {\n            this.isProcessing = false;\n            console.log(`🎯 ===== 方块点击事件结束 =====\\n`);\n        }\n    }\n    \n    /**\n     * 执行消除动画\n     */\n    private async animateElimination(blocks: {row: number, col: number}[]): Promise<void> {\n        return new Promise((resolve) => {\n            let completedAnimations = 0;\n            const totalAnimations = blocks.length;\n            \n            blocks.forEach(({row, col}) => {\n                const blockNode = this.boardManager.getBlockNodeAt(row, col);\n                if (blockNode) {\n                    // 缩放消失动画\n                    tween(blockNode)\n                        .to(0.3, { \n                            scale: new Vec3(0, 0, 1) \n                        }, { easing: 'backIn' })\n                        .call(() => {\n                            blockNode.removeFromParent();\n                            completedAnimations++;\n                            if (completedAnimations >= totalAnimations) {\n                                resolve();\n                            }\n                        })\n                        .start();\n                }\n            });\n            \n            // 防止卡死\n            setTimeout(() => {\n                if (completedAnimations < totalAnimations) {\n                    console.warn('⚠️ 消除动画超时，强制完成');\n                    resolve();\n                }\n            }, 2000);\n        });\n    }\n    \n    /**\n     * 更新游戏UI显示\n     */\n    private updateGameUI() {\n        const gameData = this.gameStateManager.getGameData();\n        this.uiManager.updateGameState({\n            score: gameData.currentScore,\n            targetScore: gameData.targetScore,\n            isGameOver: this.gameStateManager.isGameEnded(),\n            remainingBlocks: gameData.remainingBlocks,\n            moveCount: gameData.moveCount\n        });\n    }\n    \n    /**\n     * 更新分数显示（保持兼容性）\n     */\n    private updateScoreDisplay() {\n        this.updateGameUI();\n    }\n    \n    /**\n     * 检查游戏状态\n     */\n    private checkGameState() {\n        // 更新剩余方块数量\n        const remainingBlocks = this.boardManager.countRemainingBlocks();\n        this.gameStateManager.updateGameData({ remainingBlocks });\n        \n        // 检查胜利条件（在 GameStateManager 中自动检查）\n        const gameData = this.gameStateManager.getGameData();\n        if (gameData.currentScore >= gameData.targetScore) {\n            this.endGame(true);\n            return;\n        }\n        \n        // 检查是否还有可消除的连通区域\n        const hasValidMoves = this.eliminationManager.hasValidMoves(this.boardManager.getBoardData());\n        \n        if (!hasValidMoves) {\n            this.endGame(false);\n        }\n    }\n    \n    /**\n     * 结束游戏\n     */\n    private endGame(isVictory: boolean = false) {\n        console.log(`🎲 游戏结束 - ${isVictory ? '胜利' : '失败'}`);\n        \n        // 计算剩余方块奖励\n        const remainingBlocks = this.boardManager.countRemainingBlocks();\n        const bonusScore = this.scoreManager.calculateBonusScore(remainingBlocks);\n        \n        if (bonusScore > 0) {\n            this.currentScore += bonusScore;\n            this.gameStateManager.updateGameData({ \n                currentScore: this.currentScore \n            });\n            console.log(`🎁 剩余方块奖励: ${bonusScore} 分`);\n        }\n        \n        // 通知状态管理器游戏结束\n        this.gameStateManager.endGame(isVictory);\n        \n        // 更新最终UI显示\n        this.updateGameUI();\n        \n        this.isGameOver = true;\n    }\n    \n    /**\n     * 显示提示\n     */\n    private showHint() {\n        if (!this.gameStateManager.canPerformGameAction()) {\n            return;\n        }\n        \n        console.log('💡 显示游戏提示');\n        \n        // 找到最大的连通区域\n        const boardData = this.boardManager.getBoardData();\n        let largestRegion: {row: number, col: number}[] = [];\n        let maxSize = 0;\n        \n        for (let row = 0; row < this.boardSize; row++) {\n            for (let col = 0; col < this.boardSize; col++) {\n                if (boardData[row][col].type !== -1) {\n                    const region = this.eliminationManager.findConnectedBlocks(boardData, row, col);\n                    if (region.length >= 2 && region.length > maxSize) {\n                        maxSize = region.length;\n                        largestRegion = region;\n                    }\n                }\n            }\n        }\n        \n        if (largestRegion.length > 0) {\n            console.log(`💡 最佳选择: ${largestRegion.length} 个连通方块`);\n            this.uiManager.showHint(`建议消除 ${largestRegion.length} 个连通方块，可获得 ${this.scoreManager.calculateEliminationScore(largestRegion.length)} 分`);\n        } else {\n            this.uiManager.showHint('没有可消除的方块组合');\n        }\n    }\n    \n    /**\n     * 切换暂停状态\n     */\n    private togglePause() {\n        if (this.gameStateManager.getCurrentState() === GameState.PLAYING) {\n            this.gameStateManager.pauseGame();\n            this.inputManager.disableInput();\n            console.log('⏸️ 游戏已暂停');\n        } else if (this.gameStateManager.getCurrentState() === GameState.PAUSED) {\n            this.gameStateManager.resumeGame();\n            this.inputManager.enableInput();\n            console.log('▶️ 游戏已恢复');\n        }\n    }\n    \n    /**\n     * 重新开始游戏\n     */\n    public restartGame() {\n        console.log('🔄 重新开始游戏');\n        this.startNewGame();\n    }\n    \n    /**\n     * 获取当前分数\n     */\n    public getCurrentScore(): number {\n        return this.currentScore;\n    }\n    \n    /**\n     * 获取游戏状态\n     */\n    public getGameState(): {score: number, isGameOver: boolean, targetScore: number} {\n        return {\n            score: this.currentScore,\n            isGameOver: this.isGameOver,\n            targetScore: this.targetScore\n        };\n    }\n}\n"]}