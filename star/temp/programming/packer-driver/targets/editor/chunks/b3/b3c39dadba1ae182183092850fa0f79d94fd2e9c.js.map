{"version":3,"sources":["file:///Users/xinzhou/work/mahjong/star/assets/scripts/PhysicsManager.ts"],"names":["PhysicsManager","tween","init","console","log","rearrangeBoard","boardManager","blockManager","dropBlocks","shiftColumnsLeft","boardData","getBoardData","boardSize","length","animationPromises","col","columnBlocks","getColumnBlocks","targetRow","i","blockInfo","currentRow","row","data","type","node","blockNode","newPos","gridToLocal","name","animationPromise","Promise","resolve","to","position","easing","call","start","push","all","columnsToMove","targetCol","isColumnEmpty","from","move","sourceData","previewDropEffect","moves","previewShiftEffect","needsRearrangement","dropMoves","shiftMoves","instantRearrange","setPosition","debugPrintRearrangementPreview","forEach"],"mappings":";;;sFASaA,c;;;;;;;;;;;;;;;;;;;AAJJC,MAAAA,K,OAAAA,K;;;;;;AALT;AACA;AACA;AACA;;;;;gCAMaD,c,GAAN,MAAMA,cAAN,CAAqB;AAExB;AACJ;AACA;AACIE,QAAAA,IAAI,GAAG;AACHC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;AAED;AACJ;AACA;;;AACwB,cAAdC,cAAc,CAACC,YAAD,EAA6BC,YAA7B,EAAwE;AACxFJ,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EADwF,CAGxF;;AACA,gBAAM,KAAKI,UAAL,CAAgBF,YAAhB,CAAN,CAJwF,CAMxF;;AACA,gBAAM,KAAKG,gBAAL,CAAsBH,YAAtB,CAAN;AAEAH,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH;AAED;AACJ;AACA;;;AAC4B,cAAVI,UAAU,CAACF,YAAD,EAA4C;AAChEH,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAEA,gBAAMM,SAAS,GAAGJ,YAAY,CAACK,YAAb,EAAlB;AACA,gBAAMC,SAAS,GAAGF,SAAS,CAACG,MAA5B;AACA,gBAAMC,iBAAkC,GAAG,EAA3C,CALgE,CAOhE;;AACA,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,SAAxB,EAAmCG,GAAG,EAAtC,EAA0C;AACtC;AACA,kBAAMC,YAAY,GAAGV,YAAY,CAACW,eAAb,CAA6BF,GAA7B,CAArB;AAEA,gBAAIC,YAAY,CAACH,MAAb,KAAwB,CAA5B,EAA+B,SAJO,CAMtC;;AACA,gBAAIK,SAAS,GAAGN,SAAS,GAAG,CAA5B,CAPsC,CAON;AAEhC;;AACA,iBAAK,IAAIO,CAAC,GAAGH,YAAY,CAACH,MAAb,GAAsB,CAAnC,EAAsCM,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AAC/C,oBAAMC,SAAS,GAAGJ,YAAY,CAACG,CAAD,CAA9B;AACA,oBAAME,UAAU,GAAGD,SAAS,CAACE,GAA7B;;AAEA,kBAAID,UAAU,KAAKH,SAAnB,EAA8B;AAC1B;AACAf,gBAAAA,OAAO,CAACC,GAAR,CAAa,aAAYiB,UAAW,KAAIN,GAAI,SAAQG,SAAU,KAAIH,GAAI,GAAtE,EAF0B,CAI1B;;AACAL,gBAAAA,SAAS,CAACQ,SAAD,CAAT,CAAqBH,GAArB,IAA4BK,SAAS,CAACG,IAAtC;AACAb,gBAAAA,SAAS,CAACW,UAAD,CAAT,CAAsBN,GAAtB,IAA6B;AACzBS,kBAAAA,IAAI,EAAE,CAAC,CADkB;AAEzBC,kBAAAA,IAAI,EAAE;AAFmB,iBAA7B,CAN0B,CAW1B;;AACA,oBAAIL,SAAS,CAACG,IAAV,CAAeE,IAAnB,EAAyB;AACrB,wBAAMC,SAAS,GAAGN,SAAS,CAACG,IAAV,CAAeE,IAAjC;AACA,wBAAME,MAAM,GAAGrB,YAAY,CAACsB,WAAb,CAAyBV,SAAzB,EAAoCH,GAApC,CAAf;AACAW,kBAAAA,SAAS,CAACG,IAAV,GAAkB,SAAQX,SAAU,IAAGH,GAAI,EAA3C;AAEA,wBAAMe,gBAAgB,GAAG,IAAIC,OAAJ,CAAmBC,OAAD,IAAa;AACpD/B,oBAAAA,KAAK,CAACyB,SAAD,CAAL,CACKO,EADL,CACQ,GADR,EACa;AACLC,sBAAAA,QAAQ,EAAEP;AADL,qBADb,EAGO;AACCQ,sBAAAA,MAAM,EAAE;AADT,qBAHP,EAMKC,IANL,CAMU,MAAMJ,OAAO,EANvB,EAOKK,KAPL;AAQH,mBATwB,CAAzB;AAWAvB,kBAAAA,iBAAiB,CAACwB,IAAlB,CAAuBR,gBAAvB;AACH;AACJ;;AAEDZ,cAAAA,SAAS;AACZ;AACJ,WAxD+D,CA0DhE;;;AACA,cAAIJ,iBAAiB,CAACD,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,kBAAMkB,OAAO,CAACQ,GAAR,CAAYzB,iBAAZ,CAAN;AACAX,YAAAA,OAAO,CAACC,GAAR,CAAa,KAAIU,iBAAiB,CAACD,MAAO,YAA1C;AACH;AACJ;AAED;AACJ;AACA;;;AACkC,cAAhBJ,gBAAgB,CAACH,YAAD,EAA4C;AACtEH,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAEA,gBAAMM,SAAS,GAAGJ,YAAY,CAACK,YAAb,EAAlB;AACA,gBAAMC,SAAS,GAAGF,SAAS,CAACG,MAA5B;AACA,gBAAMC,iBAAkC,GAAG,EAA3C,CALsE,CAOtE;;AACA,gBAAM0B,aAA2C,GAAG,EAApD;AACA,cAAIC,SAAS,GAAG,CAAhB;;AAEA,eAAK,IAAI1B,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,SAAxB,EAAmCG,GAAG,EAAtC,EAA0C;AACtC,gBAAI,CAACT,YAAY,CAACoC,aAAb,CAA2B3B,GAA3B,CAAL,EAAsC;AAClC,kBAAIA,GAAG,KAAK0B,SAAZ,EAAuB;AACnBD,gBAAAA,aAAa,CAACF,IAAd,CAAmB;AAACK,kBAAAA,IAAI,EAAE5B,GAAP;AAAYkB,kBAAAA,EAAE,EAAEQ;AAAhB,iBAAnB;AACH;;AACDA,cAAAA,SAAS;AACZ;AACJ,WAlBqE,CAoBtE;;;AACA,eAAK,MAAMG,IAAX,IAAmBJ,aAAnB,EAAkC;AAC9BrC,YAAAA,OAAO,CAACC,GAAR,CAAa,WAAUwC,IAAI,CAACD,IAAK,OAAMC,IAAI,CAACX,EAAG,EAA/C,EAD8B,CAG9B;;AACA,iBAAK,IAAIX,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGV,SAAxB,EAAmCU,GAAG,EAAtC,EAA0C;AACtC,oBAAMuB,UAAU,GAAGnC,SAAS,CAACY,GAAD,CAAT,CAAesB,IAAI,CAACD,IAApB,CAAnB;;AAEA,kBAAIE,UAAU,CAACrB,IAAX,KAAoB,CAAC,CAAzB,EAA4B;AACxB;AACAd,gBAAAA,SAAS,CAACY,GAAD,CAAT,CAAesB,IAAI,CAACX,EAApB,IAA0BY,UAA1B;AACAnC,gBAAAA,SAAS,CAACY,GAAD,CAAT,CAAesB,IAAI,CAACD,IAApB,IAA4B;AACxBnB,kBAAAA,IAAI,EAAE,CAAC,CADiB;AAExBC,kBAAAA,IAAI,EAAE;AAFkB,iBAA5B,CAHwB,CAQxB;;AACA,oBAAIoB,UAAU,CAACpB,IAAf,EAAqB;AACjB,wBAAMC,SAAS,GAAGmB,UAAU,CAACpB,IAA7B;AACA,wBAAME,MAAM,GAAGrB,YAAY,CAACsB,WAAb,CAAyBN,GAAzB,EAA8BsB,IAAI,CAACX,EAAnC,CAAf;AACAP,kBAAAA,SAAS,CAACG,IAAV,GAAkB,SAAQP,GAAI,IAAGsB,IAAI,CAACX,EAAG,EAAzC;AAEA,wBAAMH,gBAAgB,GAAG,IAAIC,OAAJ,CAAmBC,OAAD,IAAa;AACpD/B,oBAAAA,KAAK,CAACyB,SAAD,CAAL,CACKO,EADL,CACQ,GADR,EACa;AACLC,sBAAAA,QAAQ,EAAEP;AADL,qBADb,EAGO;AACCQ,sBAAAA,MAAM,EAAE;AADT,qBAHP,EAMKC,IANL,CAMU,MAAMJ,OAAO,EANvB,EAOKK,KAPL;AAQH,mBATwB,CAAzB;AAWAvB,kBAAAA,iBAAiB,CAACwB,IAAlB,CAAuBR,gBAAvB;AACH;AACJ;AACJ;AACJ,WAzDqE,CA2DtE;;;AACA,cAAIhB,iBAAiB,CAACD,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,kBAAMkB,OAAO,CAACQ,GAAR,CAAYzB,iBAAZ,CAAN;AACAX,YAAAA,OAAO,CAACC,GAAR,CAAa,KAAIU,iBAAiB,CAACD,MAAO,YAA1C;AACH;AACJ;AAED;AACJ;AACA;;;AACIiC,QAAAA,iBAAiB,CAACxC,YAAD,EAAmG;AAChH,gBAAMI,SAAS,GAAGJ,YAAY,CAACK,YAAb,EAAlB;AACA,gBAAMC,SAAS,GAAGF,SAAS,CAACG,MAA5B;AACA,gBAAMkC,KAA2E,GAAG,EAApF;;AAEA,eAAK,IAAIhC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,SAAxB,EAAmCG,GAAG,EAAtC,EAA0C;AACtC,kBAAMC,YAAY,GAAGV,YAAY,CAACW,eAAb,CAA6BF,GAA7B,CAArB;AACA,gBAAIG,SAAS,GAAGN,SAAS,GAAG,CAA5B;;AAEA,iBAAK,IAAIO,CAAC,GAAGH,YAAY,CAACH,MAAb,GAAsB,CAAnC,EAAsCM,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AAC/C,oBAAMC,SAAS,GAAGJ,YAAY,CAACG,CAAD,CAA9B;;AACA,kBAAIC,SAAS,CAACE,GAAV,KAAkBJ,SAAtB,EAAiC;AAC7B6B,gBAAAA,KAAK,CAACT,IAAN,CAAW;AACPK,kBAAAA,IAAI,EAAE;AAACrB,oBAAAA,GAAG,EAAEF,SAAS,CAACE,GAAhB;AAAqBP,oBAAAA,GAAG,EAAEA;AAA1B,mBADC;AAEPkB,kBAAAA,EAAE,EAAE;AAACX,oBAAAA,GAAG,EAAEJ,SAAN;AAAiBH,oBAAAA,GAAG,EAAEA;AAAtB;AAFG,iBAAX;AAIH;;AACDG,cAAAA,SAAS;AACZ;AACJ;;AAED,iBAAO6B,KAAP;AACH;AAED;AACJ;AACA;;;AACIC,QAAAA,kBAAkB,CAAC1C,YAAD,EAA2D;AACzE,gBAAMM,SAAS,GAAGN,YAAY,CAACK,YAAb,GAA4BE,MAA9C;AACA,gBAAMkC,KAAmC,GAAG,EAA5C;AACA,cAAIN,SAAS,GAAG,CAAhB;;AAEA,eAAK,IAAI1B,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,SAAxB,EAAmCG,GAAG,EAAtC,EAA0C;AACtC,gBAAI,CAACT,YAAY,CAACoC,aAAb,CAA2B3B,GAA3B,CAAL,EAAsC;AAClC,kBAAIA,GAAG,KAAK0B,SAAZ,EAAuB;AACnBM,gBAAAA,KAAK,CAACT,IAAN,CAAW;AAACK,kBAAAA,IAAI,EAAE5B,GAAP;AAAYkB,kBAAAA,EAAE,EAAEQ;AAAhB,iBAAX;AACH;;AACDA,cAAAA,SAAS;AACZ;AACJ;;AAED,iBAAOM,KAAP;AACH;AAED;AACJ;AACA;;;AACIE,QAAAA,kBAAkB,CAAC3C,YAAD,EAAsC;AACpD;AACA,gBAAM4C,SAAS,GAAG,KAAKJ,iBAAL,CAAuBxC,YAAvB,CAAlB;;AACA,cAAI4C,SAAS,CAACrC,MAAV,GAAmB,CAAvB,EAA0B;AACtB,mBAAO,IAAP;AACH,WALmD,CAOpD;;;AACA,gBAAMsC,UAAU,GAAG,KAAKH,kBAAL,CAAwB1C,YAAxB,CAAnB;;AACA,cAAI6C,UAAU,CAACtC,MAAX,GAAoB,CAAxB,EAA2B;AACvB,mBAAO,IAAP;AACH;;AAED,iBAAO,KAAP;AACH;AAED;AACJ;AACA;;;AACIuC,QAAAA,gBAAgB,CAAC9C,YAAD,EAA6B;AACzCH,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAEA,gBAAMM,SAAS,GAAGJ,YAAY,CAACK,YAAb,EAAlB;AACA,gBAAMC,SAAS,GAAGF,SAAS,CAACG,MAA5B,CAJyC,CAMzC;;AACA,eAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,SAAxB,EAAmCG,GAAG,EAAtC,EAA0C;AACtC,kBAAMC,YAAY,GAAGV,YAAY,CAACW,eAAb,CAA6BF,GAA7B,CAArB;AACA,gBAAIG,SAAS,GAAGN,SAAS,GAAG,CAA5B;;AAEA,iBAAK,IAAIO,CAAC,GAAGH,YAAY,CAACH,MAAb,GAAsB,CAAnC,EAAsCM,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AAC/C,oBAAMC,SAAS,GAAGJ,YAAY,CAACG,CAAD,CAA9B;AACA,oBAAME,UAAU,GAAGD,SAAS,CAACE,GAA7B;;AAEA,kBAAID,UAAU,KAAKH,SAAnB,EAA8B;AAC1B;AACAR,gBAAAA,SAAS,CAACQ,SAAD,CAAT,CAAqBH,GAArB,IAA4BK,SAAS,CAACG,IAAtC;AACAb,gBAAAA,SAAS,CAACW,UAAD,CAAT,CAAsBN,GAAtB,IAA6B;AACzBS,kBAAAA,IAAI,EAAE,CAAC,CADkB;AAEzBC,kBAAAA,IAAI,EAAE;AAFmB,iBAA7B,CAH0B,CAQ1B;;AACA,oBAAIL,SAAS,CAACG,IAAV,CAAeE,IAAnB,EAAyB;AACrB,wBAAMC,SAAS,GAAGN,SAAS,CAACG,IAAV,CAAeE,IAAjC;AACA,wBAAME,MAAM,GAAGrB,YAAY,CAACsB,WAAb,CAAyBV,SAAzB,EAAoCH,GAApC,CAAf;AACAW,kBAAAA,SAAS,CAAC2B,WAAV,CAAsB1B,MAAtB;AACAD,kBAAAA,SAAS,CAACG,IAAV,GAAkB,SAAQX,SAAU,IAAGH,GAAI,EAA3C;AACH;AACJ;;AAEDG,cAAAA,SAAS;AACZ;AACJ,WAlCwC,CAoCzC;;;AACA,cAAIuB,SAAS,GAAG,CAAhB;;AACA,eAAK,IAAI1B,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,SAAxB,EAAmCG,GAAG,EAAtC,EAA0C;AACtC,gBAAI,CAACT,YAAY,CAACoC,aAAb,CAA2B3B,GAA3B,CAAL,EAAsC;AAClC,kBAAIA,GAAG,KAAK0B,SAAZ,EAAuB;AACnB;AACA,qBAAK,IAAInB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGV,SAAxB,EAAmCU,GAAG,EAAtC,EAA0C;AACtC,wBAAMuB,UAAU,GAAGnC,SAAS,CAACY,GAAD,CAAT,CAAeP,GAAf,CAAnB;;AAEA,sBAAI8B,UAAU,CAACrB,IAAX,KAAoB,CAAC,CAAzB,EAA4B;AACxBd,oBAAAA,SAAS,CAACY,GAAD,CAAT,CAAemB,SAAf,IAA4BI,UAA5B;AACAnC,oBAAAA,SAAS,CAACY,GAAD,CAAT,CAAeP,GAAf,IAAsB;AAClBS,sBAAAA,IAAI,EAAE,CAAC,CADW;AAElBC,sBAAAA,IAAI,EAAE;AAFY,qBAAtB;;AAKA,wBAAIoB,UAAU,CAACpB,IAAf,EAAqB;AACjB,4BAAMC,SAAS,GAAGmB,UAAU,CAACpB,IAA7B;AACA,4BAAME,MAAM,GAAGrB,YAAY,CAACsB,WAAb,CAAyBN,GAAzB,EAA8BmB,SAA9B,CAAf;AACAf,sBAAAA,SAAS,CAAC2B,WAAV,CAAsB1B,MAAtB;AACAD,sBAAAA,SAAS,CAACG,IAAV,GAAkB,SAAQP,GAAI,IAAGmB,SAAU,EAA3C;AACH;AACJ;AACJ;AACJ;;AACDA,cAAAA,SAAS;AACZ;AACJ;;AAEDtC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH;AAED;AACJ;AACA;;;AACIkD,QAAAA,8BAA8B,CAAChD,YAAD,EAA6B;AACvD,gBAAM4C,SAAS,GAAG,KAAKJ,iBAAL,CAAuBxC,YAAvB,CAAlB;AACA,gBAAM6C,UAAU,GAAG,KAAKH,kBAAL,CAAwB1C,YAAxB,CAAnB;AAEAH,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAa,WAAU8C,SAAS,CAACrC,MAAO,IAAxC;AACAqC,UAAAA,SAAS,CAACK,OAAV,CAAkBX,IAAI,IAAI;AACtBzC,YAAAA,OAAO,CAACC,GAAR,CAAa,QAAOwC,IAAI,CAACD,IAAL,CAAUrB,GAAI,KAAIsB,IAAI,CAACD,IAAL,CAAU5B,GAAI,SAAQ6B,IAAI,CAACX,EAAL,CAAQX,GAAI,KAAIsB,IAAI,CAACX,EAAL,CAAQlB,GAAI,GAAxF;AACH,WAFD;AAIAZ,UAAAA,OAAO,CAACC,GAAR,CAAa,WAAU+C,UAAU,CAACtC,MAAO,IAAzC;AACAsC,UAAAA,UAAU,CAACI,OAAX,CAAmBX,IAAI,IAAI;AACvBzC,YAAAA,OAAO,CAACC,GAAR,CAAa,SAAQwC,IAAI,CAACD,IAAK,SAAQC,IAAI,CAACX,EAAG,EAA/C;AACH,WAFD;AAGH;;AA3TuB,O","sourcesContent":["/**\n * 物理管理器\n * 负责处理方块的下落和左移重排效果\n */\n\nimport { tween, Vec3 } from 'cc';\nimport { BoardManager } from './BoardManager';\nimport { BlockManager } from './BlockManager';\n\nexport class PhysicsManager {\n    \n    /**\n     * 初始化物理管理器\n     */\n    init() {\n        console.log('✅ 物理管理器初始化完成');\n    }\n    \n    /**\n     * 重新排列棋盘（下落 + 左移）\n     */\n    async rearrangeBoard(boardManager: BoardManager, blockManager: BlockManager): Promise<void> {\n        console.log('🌊 开始棋盘重排：下落 + 左移');\n        \n        // 第一步：方块下落\n        await this.dropBlocks(boardManager);\n        \n        // 第二步：列左移\n        await this.shiftColumnsLeft(boardManager);\n        \n        console.log('✅ 棋盘重排完成');\n    }\n    \n    /**\n     * 方块下落效果\n     */\n    private async dropBlocks(boardManager: BoardManager): Promise<void> {\n        console.log('⬇️ 执行方块下落');\n        \n        const boardData = boardManager.getBoardData();\n        const boardSize = boardData.length;\n        const animationPromises: Promise<void>[] = [];\n        \n        // 遍历每一列\n        for (let col = 0; col < boardSize; col++) {\n            // 获取当前列的所有方块（从上到下，忽略空位）\n            const columnBlocks = boardManager.getColumnBlocks(col);\n            \n            if (columnBlocks.length === 0) continue;\n            \n            // 计算每个方块应该下落到的新位置\n            let targetRow = boardSize - 1;  // 从底部开始放置\n            \n            // 从下往上处理方块\n            for (let i = columnBlocks.length - 1; i >= 0; i--) {\n                const blockInfo = columnBlocks[i];\n                const currentRow = blockInfo.row;\n                \n                if (currentRow !== targetRow) {\n                    // 需要移动方块\n                    console.log(`📦 方块下落: (${currentRow}, ${col}) -> (${targetRow}, ${col})`);\n                    \n                    // 更新数据\n                    boardData[targetRow][col] = blockInfo.data;\n                    boardData[currentRow][col] = {\n                        type: -1,\n                        node: null\n                    };\n                    \n                    // 创建下落动画\n                    if (blockInfo.data.node) {\n                        const blockNode = blockInfo.data.node;\n                        const newPos = boardManager.gridToLocal(targetRow, col);\n                        blockNode.name = `Block_${targetRow}_${col}`;\n                        \n                        const animationPromise = new Promise<void>((resolve) => {\n                            tween(blockNode)\n                                .to(0.3, { \n                                    position: newPos \n                                }, { \n                                    easing: 'bounceOut' \n                                })\n                                .call(() => resolve())\n                                .start();\n                        });\n                        \n                        animationPromises.push(animationPromise);\n                    }\n                }\n                \n                targetRow--;\n            }\n        }\n        \n        // 等待所有下落动画完成\n        if (animationPromises.length > 0) {\n            await Promise.all(animationPromises);\n            console.log(`✅ ${animationPromises.length} 个方块下落动画完成`);\n        }\n    }\n    \n    /**\n     * 列左移效果\n     */\n    private async shiftColumnsLeft(boardManager: BoardManager): Promise<void> {\n        console.log('⬅️ 执行列左移');\n        \n        const boardData = boardManager.getBoardData();\n        const boardSize = boardData.length;\n        const animationPromises: Promise<void>[] = [];\n        \n        // 找到需要移动的列\n        const columnsToMove: {from: number, to: number}[] = [];\n        let targetCol = 0;\n        \n        for (let col = 0; col < boardSize; col++) {\n            if (!boardManager.isColumnEmpty(col)) {\n                if (col !== targetCol) {\n                    columnsToMove.push({from: col, to: targetCol});\n                }\n                targetCol++;\n            }\n        }\n        \n        // 执行列移动\n        for (const move of columnsToMove) {\n            console.log(`📂 列左移: ${move.from} -> ${move.to}`);\n            \n            // 移动整列的数据和节点\n            for (let row = 0; row < boardSize; row++) {\n                const sourceData = boardData[row][move.from];\n                \n                if (sourceData.type !== -1) {\n                    // 移动数据\n                    boardData[row][move.to] = sourceData;\n                    boardData[row][move.from] = {\n                        type: -1,\n                        node: null\n                    };\n                    \n                    // 移动节点\n                    if (sourceData.node) {\n                        const blockNode = sourceData.node;\n                        const newPos = boardManager.gridToLocal(row, move.to);\n                        blockNode.name = `Block_${row}_${move.to}`;\n                        \n                        const animationPromise = new Promise<void>((resolve) => {\n                            tween(blockNode)\n                                .to(0.4, { \n                                    position: newPos \n                                }, { \n                                    easing: 'quartOut' \n                                })\n                                .call(() => resolve())\n                                .start();\n                        });\n                        \n                        animationPromises.push(animationPromise);\n                    }\n                }\n            }\n        }\n        \n        // 等待所有左移动画完成\n        if (animationPromises.length > 0) {\n            await Promise.all(animationPromises);\n            console.log(`✅ ${animationPromises.length} 个方块左移动画完成`);\n        }\n    }\n    \n    /**\n     * 预览下落效果（不实际移动，返回预览信息）\n     */\n    previewDropEffect(boardManager: BoardManager): {from: {row: number, col: number}, to: {row: number, col: number}}[] {\n        const boardData = boardManager.getBoardData();\n        const boardSize = boardData.length;\n        const moves: {from: {row: number, col: number}, to: {row: number, col: number}}[] = [];\n        \n        for (let col = 0; col < boardSize; col++) {\n            const columnBlocks = boardManager.getColumnBlocks(col);\n            let targetRow = boardSize - 1;\n            \n            for (let i = columnBlocks.length - 1; i >= 0; i--) {\n                const blockInfo = columnBlocks[i];\n                if (blockInfo.row !== targetRow) {\n                    moves.push({\n                        from: {row: blockInfo.row, col: col},\n                        to: {row: targetRow, col: col}\n                    });\n                }\n                targetRow--;\n            }\n        }\n        \n        return moves;\n    }\n    \n    /**\n     * 预览左移效果（不实际移动，返回预览信息）\n     */\n    previewShiftEffect(boardManager: BoardManager): {from: number, to: number}[] {\n        const boardSize = boardManager.getBoardData().length;\n        const moves: {from: number, to: number}[] = [];\n        let targetCol = 0;\n        \n        for (let col = 0; col < boardSize; col++) {\n            if (!boardManager.isColumnEmpty(col)) {\n                if (col !== targetCol) {\n                    moves.push({from: col, to: targetCol});\n                }\n                targetCol++;\n            }\n        }\n        \n        return moves;\n    }\n    \n    /**\n     * 检查是否需要重排\n     */\n    needsRearrangement(boardManager: BoardManager): boolean {\n        // 检查是否有方块需要下落\n        const dropMoves = this.previewDropEffect(boardManager);\n        if (dropMoves.length > 0) {\n            return true;\n        }\n        \n        // 检查是否有列需要左移\n        const shiftMoves = this.previewShiftEffect(boardManager);\n        if (shiftMoves.length > 0) {\n            return true;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * 即时重排（无动画，用于初始化或快速操作）\n     */\n    instantRearrange(boardManager: BoardManager) {\n        console.log('⚡ 执行即时重排（无动画）');\n        \n        const boardData = boardManager.getBoardData();\n        const boardSize = boardData.length;\n        \n        // 即时下落\n        for (let col = 0; col < boardSize; col++) {\n            const columnBlocks = boardManager.getColumnBlocks(col);\n            let targetRow = boardSize - 1;\n            \n            for (let i = columnBlocks.length - 1; i >= 0; i--) {\n                const blockInfo = columnBlocks[i];\n                const currentRow = blockInfo.row;\n                \n                if (currentRow !== targetRow) {\n                    // 移动数据\n                    boardData[targetRow][col] = blockInfo.data;\n                    boardData[currentRow][col] = {\n                        type: -1,\n                        node: null\n                    };\n                    \n                    // 移动节点\n                    if (blockInfo.data.node) {\n                        const blockNode = blockInfo.data.node;\n                        const newPos = boardManager.gridToLocal(targetRow, col);\n                        blockNode.setPosition(newPos);\n                        blockNode.name = `Block_${targetRow}_${col}`;\n                    }\n                }\n                \n                targetRow--;\n            }\n        }\n        \n        // 即时左移\n        let targetCol = 0;\n        for (let col = 0; col < boardSize; col++) {\n            if (!boardManager.isColumnEmpty(col)) {\n                if (col !== targetCol) {\n                    // 移动整列\n                    for (let row = 0; row < boardSize; row++) {\n                        const sourceData = boardData[row][col];\n                        \n                        if (sourceData.type !== -1) {\n                            boardData[row][targetCol] = sourceData;\n                            boardData[row][col] = {\n                                type: -1,\n                                node: null\n                            };\n                            \n                            if (sourceData.node) {\n                                const blockNode = sourceData.node;\n                                const newPos = boardManager.gridToLocal(row, targetCol);\n                                blockNode.setPosition(newPos);\n                                blockNode.name = `Block_${row}_${targetCol}`;\n                            }\n                        }\n                    }\n                }\n                targetCol++;\n            }\n        }\n        \n        console.log('✅ 即时重排完成');\n    }\n    \n    /**\n     * 调试：打印重排预览信息\n     */\n    debugPrintRearrangementPreview(boardManager: BoardManager) {\n        const dropMoves = this.previewDropEffect(boardManager);\n        const shiftMoves = this.previewShiftEffect(boardManager);\n        \n        console.log('🔍 重排预览:');\n        console.log(`  下落移动: ${dropMoves.length} 个`);\n        dropMoves.forEach(move => {\n            console.log(`    (${move.from.row}, ${move.from.col}) -> (${move.to.row}, ${move.to.col})`);\n        });\n        \n        console.log(`  左移移动: ${shiftMoves.length} 个`);\n        shiftMoves.forEach(move => {\n            console.log(`    列 ${move.from} -> 列 ${move.to}`);\n        });\n    }\n}\n"]}